{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="src/visualization/report_generator.py">\n"""\nReport generator for sentiment analysis results.\nCreates comprehensive HTML and PDF reports with all analysis results.\n"""\nimport json\nfrom datetime import datetime\nfrom pathlib import Path\nfrom typing import Dict, Any, List, Optional\nimport base64\nimport io\n\ntry:\n    from matplotlib import pyplot as plt\n    MATPLOTLIB_AVAILABLE = True\nexcept ImportError:\n    MATPLOTLIB_AVAILABLE = False\n\nfrom ..config import OUTPUTS_DIR\nfrom ..utils.logger import get_logger\nfrom .charts_generator import ChartsGenerator\nfrom .wordcloud_generator import WordCloudGenerator\n\nlogger = get_logger(__name__)\n\nclass ReportGenerator:\n    """Generate comprehensive analysis reports"""\n    \n    def __init__(self):\n        self.charts_generator = ChartsGenerator()\n        self.wordcloud_generator = WordCloudGenerator()\n    \n    def generate_html_report(self, analysis_results: Dict[str, Any], \n                           service: str, source: str,\n                           save_path: Optional[str] = None) -> str:\n        """Generate comprehensive HTML report"""\n        try:\n            # Generate charts and word clouds\n            charts_data = self._generate_charts_data(analysis_results)\n            \n            # Build HTML content\n            html_content = self._build_html_report(\n                analysis_results, service, source, charts_data\n            )\n            \n            # Save HTML file\n            if save_path:\n                with open(save_path, \'w\', encoding=\'utf-8\') as f:\n                    f.write(html_content)\n                logger.info(f"HTML report saved to {save_path}")\n            else:\n                # Save to default location\n                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")\n                default_path = OUTPUTS_DIR / f"{service}_{source}_report_{timestamp}.html"\n                default_path.parent.mkdir(parents=True, exist_ok=True)\n                \n                with open(default_path, \'w\', encoding=\'utf-8\') as f:\n                    f.write(html_content)\n                logger.info(f"HTML report saved to {default_path}")\n                save_path = str(default_path)\n            \n            return save_path\n            \n        except Exception as e:\n            logger.error(f"Error generating HTML report: {e}")\n            return ""\n    \n    def generate_pdf_report(self, analysis_results: Dict[str, Any],\n                          service: str, source: str,\n                          save_path: Optional[str] = None) -> str:\n        """Generate PDF report"""\n        try:\n            # First generate HTML report\n            html_path = self.generate_html_report(analysis_results, service, source)\n            \n            if not html_path:\n                return ""\n            \n            # Convert HTML to PDF (simplified approach)\n            # Note: For production, you\'d want to use a proper HTML to PDF converter\n            # like WeasyPrint, pdfkit, or reportlab\n            \n            if save_path:\n                # Copy HTML content to PDF path (placeholder)\n                with open(html_path, \'r\', encoding=\'utf-8\') as f:\n                    html_content = f.read()\n                \n                # Save as PDF (this is a placeholder - real implementation would need proper conversion)\n                pdf_path = save_path\n                with open(pdf_path, \'w\', encoding=\'utf-8\') as f:\n                    f.write(f"PDF version of report\\n\\n{html_content[:1000]}...")\n                \n                logger.info(f"PDF report saved to {pdf_path}")\n                return pdf_path\n            else:\n                # Use HTML path as fallback\n                return html_path\n                \n        except Exception as e:\n            logger.error(f"Error generating PDF report: {e}")\n            return ""\n    \n    def generate_summary_report(self, analysis_results: Dict[str, Any],\n                              service: str, source: str) -> Dict[str, Any]:\n        """Generate summary report data"""\n        try:\n            summary = {\n                \'metadata\': {\n                    \'service\': service,\n                    \'source\': source,\n                    \'generated_at\': datetime.now().isoformat(),\n                    \'report_version\': \'1.0\'\n                },\n                \'executive_summary\': self._generate_executive_summary(analysis_results),\n                \'detailed_findings\': self._generate_detailed_findings(analysis_results),\n                \'recommendations\': self._generate_recommendations(analysis_results),\n                \'technical_details\': self._generate_technical_details(analysis_results)\n            }\n            \n            return summary\n            \n        except Exception as e:\n            logger.error(f"Error generating summary report: {e}")\n            return {\'error\': str(e)}\n    \n    def _build_html_report(self, analysis_results: Dict[str, Any], \n                          service: str, source: str,\n                          charts_data: Dict[str, str]) -> str:\n        """Build HTML report content"""\n        try:\n            # Generate timestamp\n            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")\n            \n            # Extract key data\n            sentiment_summary = analysis_results.get(\'sentiment_summary\', {})\n            keywords = analysis_results.get(\'keywords\', [])\n            temporal_data = analysis_results.get(\'temporal_data\', [])\n            extraction_stats = analysis_results.get(\'extraction_stats\', {})\n            \n            # Build HTML\n            html = f"""\n            <!DOCTYPE html>\n            <html lang="fr">\n            <head>\n                <meta charset="UTF-8">\n                <meta name="viewport" content="width=device-width, initial-scale=1.0">\n                <title>Social Media Sentiment Analysis Report - {service}</title>\n                <style>\n                    body {{\n                        font-family: \'Segoe UI\', Tahoma, Geneva, Verdana, sans-serif;\n                        line-height: 1.6;\n                        margin: 0;\n                        padding: 20px;\n                        background-color: #f5f5f5;\n                    }}\n                    .container {{\n                        max-width: 1200px;\n                        margin: 0 auto;\n                        background-color: white;\n                        padding: 30px;\n                        border-radius: 10px;\n                        box-shadow: 0 0 20px rgba(0,0,0,0.1);\n                    }}\n                    h1 {{\n                        color: #2c3e50;\n                        text-align: center;\n                        border-bottom: 3px solid #3498db;\n                        padding-bottom: 10px;\n                    }}\n                    h2 {{\n                        color: #34495e;\n                        border-left: 4px solid #3498db;\n                        padding-left: 15px;\n                        margin-top: 30px;\n                    }}\n                    h3 {{\n                        color: #2c3e50;\n                        margin-top: 25px;\n                    }}\n                    .summary-box {{\n                        background-color: #ecf0f1;\n                        padding: 20px;\n                        border-radius: 8px;\n                        margin: 20px 0;\n                        border-left: 5px solid #3498db;\n                    }}\n                    .metric {{\n                        display: inline-block;\n                        margin: 10px 20px 10px 0;\n                        padding: 10px 15px;\n                        background-color: #3498db;\n                        color: white;\n                        border-radius: 5px;\n                        font-weight: bold;\n                    }}\n                    .positive {{ background-color: #27ae60; }}\n                    .negative {{ background-color: #e74c3c; }}\n                    .neutral {{ background-color: #95a5a6; }}\n                    .chart-container {{\n                        text-align: center;\n                        margin: 20px 0;\n                        padding: 15px;\n                        background-color: #fafafa;\n                        border-radius: 8px;\n                    }}\n                    .chart-container img {{\n                        max-width: 100%;\n                        height: auto;\n                        border-radius: 5px;\n                        box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n                    }}\n                    table {{\n                        width: 100%;\n                        border-collapse: collapse;\n                        margin: 20px 0;\n                    }}\n                    th, td {{\n                        padding: 12px;\n                        text-align: left;\n                        border-bottom: 1px solid #ddd;\n                    }}\n                    th {{\n                        background-color: #3498db;\n                        color: white;\n                        font-weight: bold;\n                    }}\n                    tr:nth-child(even) {{\n                        background-color: #f2f2f2;\n                    }}\n                    .keyword-list {{\n                        display: flex;\n                        flex-wrap: wrap;\n                        gap: 10px;\n                        margin: 15px 0;\n                    }}\n                    .keyword-tag {{\n                        background-color: #3498db;\n                        color: white;\n                        padding: 5px 10px;\n                        border-radius: 15px;\n                        font-size: 0.9em;\n                    }}\n                    .footer {{\n                        text-align: center;\n                        margin-top: 40px;\n                        padding-top: 20px;\n                        border-top: 1px solid #ddd;\n                        color: #7f8c8d;\n                        font-size: 0.9em;\n                    }}\n                    .recommendation {{\n                        background-color: #fff3cd;\n                        border: 1px solid #ffeaa7;\n                        border-radius: 5px;\n                        padding: 15px;\n                        margin: 10px 0;\n                    }}\n                    .recommendation h4 {{\n                        color: #856404;\n                        margin-top: 0;\n                    }}\n                </style>\n            </head>\n            <body>\n                <div class="container">\n                    <h1>Social Media Sentiment Analysis Report</h1>\n                    <h2 style="text-align: center; color: #3498db;">Service: {service} | Source: {source}</h2>\n                    <p style="text-align: center; color: #7f8c8d; font-style: italic;">Generated on {timestamp}</p>\n                    \n                    <div class="summary-box">\n                        <h3>📊 Executive Summary</h3>\n                        {self._generate_executive_summary_html(sentiment_summary, keywords)}\n                    </div>\n                    \n                    <h2>🎯 Sentiment Analysis Results</h2>\n                    <div class="chart-container">\n                        <h3>Sentiment Distribution</h3>\n                        {self._get_chart_html(charts_data.get(\'sentiment_pie\'), \'Sentiment Pie Chart\')}\n                    </div>\n                    \n                    <div class="chart-container">\n                        <h3>Sentiment Breakdown</h3>\n                        {self._get_chart_html(charts_data.get(\'sentiment_bar\'), \'Sentiment Bar Chart\')}\n                    </div>\n            """\n            \n            # Add temporal analysis if available\n            if temporal_data:\n                html += f"""\n                    <div class="chart-container">\n                        <h3>Sentiment Trends Over Time</h3>\n                        {self._get_chart_html(charts_data.get(\'sentiment_trend\'), \'Sentiment Trend Chart\')}\n                    </div>\n                """\n            \n            # Add keyword analysis\n            if keywords:\n                html += f"""\n                    <h2>🔑 Keyword Analysis</h2>\n                    <div class="chart-container">\n                        <h3>Top Keywords by Frequency</h3>\n                        {self._get_chart_html(charts_data.get(\'keyword_frequency\'), \'Keyword Frequency Chart\')}\n                    </div>\n                    \n                    <div class="chart-container">\n                        <h3>Top Keywords by Relevance Score</h3>\n                        {self._get_chart_html(charts_data.get(\'keyword_score\'), \'Keyword Score Chart\')}\n                    </div>\n                """\n                \n                # Add keyword list\n                html += self._generate_keyword_list_html(keywords[:20])\n            \n            # Add word cloud if available\n            if \'wordcloud\' in charts_data:\n                html += f"""\n                    <div class="chart-container">\n                        <h3>Keywords Word Cloud</h3>\n                        {self._get_chart_html(charts_data.get(\'wordcloud\'), \'Keywords Word Cloud\')}\n                    </div>\n                """\n            \n            # Add technical details\n            html += f"""\n                    <h2>⚙️ Technical Details</h2>\n                    {self._generate_technical_details_html(analysis_results, extraction_stats)}\n                    \n                    <div class="footer">\n                        <p>Generated by Social Media Sentiment Analysis Tool</p>\n                        <p>Report generated on {timestamp}</p>\n                    </div>\n                </div>\n            </body>\n            </html>\n            """\n            \n            return html\n            \n        except Exception as e:\n            logger.error(f"Error building HTML report: {e}")\n            return f"<html><body><h1>Error generating report: {e}</h1></body></html>"\n    \n    def _generate_charts_data(self, analysis_results: Dict[str, Any]) -> Dict[str, str]:\n        """Generate charts and convert to base64 for HTML embedding"""\n        charts_data = {}\n        \n        try:\n            if MATPLOTLIB_AVAILABLE:\n                # Generate sentiment pie chart\n                if \'sentiment_summary\' in analysis_results:\n                    fig = self.charts_generator.create_sentiment_pie_chart(\n                        analysis_results[\'sentiment_summary\']\n                    )\n                    charts_data[\'sentiment_pie\'] = self._figure_to_base64(fig)\n                    plt.close(fig)\n                \n                # Generate sentiment bar chart\n                if \'sentiment_summary\' in analysis_results:\n                    fig = self.charts_generator.create_sentiment_bar_chart(\n                        analysis_results[\'sentiment_summary\']\n                    )\n                    charts_data[\'sentiment_bar\'] = self._figure_to_base64(fig)\n                    plt.close(fig)\n                \n                # Generate sentiment trend chart\n                if \'temporal_data\' in analysis_results:\n                    fig = self.charts_generator.create_sentiment_trend_chart(\n                        analysis_results[\'temporal_data\']\n                    )\n                    charts_data[\'sentiment_trend\'] = self._figure_to_base64(fig)\n                    plt.close(fig)\n                \n                # Generate keyword charts\n                if \'keywords\' in analysis_results:\n                    fig = self.charts_generator.create_keyword_frequency_chart(\n                        analysis_results[\'keywords\']\n                    )\n                    charts_data[\'keyword_frequency\'] = self._figure_to_base64(fig)\n                    plt.close(fig)\n                    \n                    fig = self.charts_generator.create_keyword_score_chart(\n                        analysis_results[\'keywords\']\n                    )\n                    charts_data[\'keyword_score\'] = self._figure_to_base64(fig)\n                    plt.close(fig)\n                \n                # Generate word cloud\n                if \'keywords\' in analysis_results:\n                    wordcloud = self.wordcloud_generator.create_keyword_wordcloud(\n                        analysis_results[\'keywords\']\n                    )\n                    if wordcloud:\n                        fig = plt.figure(figsize=(10, 6))\n                        plt.imshow(wordcloud, interpolation=\'bilinear\')\n                        plt.axis(\'off\')\n                        plt.title(\'Keywords Word Cloud\', fontsize=14, fontweight=\'bold\')\n                        charts_data[\'wordcloud\'] = self._figure_to_base64(fig)\n                        plt.close(fig)\n            \n        except Exception as e:\n            logger.error(f"Error generating charts data: {e}")\n        \n        return charts_data\n    \n    def _figure_to_base64(self, fig) -> str:\n        """Convert matplotlib figure to base64 string"""\n        try:\n            img_buffer = io.BytesIO()\n            fig.savefig(img_buffer, format=\'png\', dpi=150, bbox_inches=\'tight\')\n            img_buffer.seek(0)\n            \n            img_base64 = base64.b64encode(img_buffer.read()).decode()\n            return f\'<img src="data:image/png;base64,{img_base64}" alt="Chart" style="max-width: 100%; height: auto;">\'\n            \n        except Exception as e:\n            logger.error(f"Error converting figure to base64: {e}")\n            return \'<p>Error loading chart</p>\'\n    \n    def _get_chart_html(self, chart_data: Optional[str], alt_text: str) -> str:\n        """Get HTML for chart with fallback"""\n        if chart_data:\n            return chart_data\n        else:\n            return f\'<p style="text-align: center; color: gray; font-style: italic;">{alt_text} not available</p>\'\n    \n    def _generate_executive_summary_html(self, sentiment_summary: Dict[str, Any], \n                                       keywords: List[Dict[str, Any]]) -> str:\n        """Generate executive summary HTML"""\n        if not sentiment_summary:\n            return "<p>No sentiment data available for summary.</p>"\n        \n        total = sentiment_summary.get(\'total\', 0)\n        positive_pct = sentiment_summary.get(\'percentages\', {}).get(\'positive\', 0)\n        negative_pct = sentiment_summary.get(\'percentages\', {}).get(\'negative\', 0)\n        neutral_pct = sentiment_summary.get(\'percentages\', {}).get(\'neutral\', 0)\n        avg_polarity = sentiment_summary.get(\'average_polarity\', 0)\n        \n        # Determine overall sentiment\n        if positive_pct > 50:\n            overall_sentiment = "predominantly positive"\n            sentiment_color = "positive"\n        elif negative_pct > 50:\n            overall_sentiment = "predominantly negative"\n            sentiment_color = "negative"\n        else:\n            overall_sentiment = "mixed"\n            sentiment_color = "neutral"\n        \n        # Top keywords\n        top_keywords = keywords[:5] if keywords else []\n        \n        html = f"""\n            <div style="margin-bottom: 20px;">\n                <p><strong>Overall Assessment:</strong> The sentiment analysis reveals a <span class="{sentiment_color}">{overall_sentiment}</span> \n                response to the service across social media platforms.</p>\n            </div>\n            \n            <div style="margin-bottom: 20px;">\n                <span class="metric positive">Positive: {positive_pct:.1f}%</span>\n                <span class="metric negative">Negative: {negative_pct:.1f}%</span>\n                <span class="metric neutral">Neutral: {neutral_pct:.1f}%</span>\n                <span class="metric">Total Posts: {total}</span>\n            </div>\n            \n            <div style="margin-bottom: 20px;">\n                <p><strong>Average Sentiment Score:</strong> {avg_polarity:.3f} \n                ({\'Positive\' if avg_polarity > 0.1 else \'Negative\' if avg_polarity < -0.1 else \'Neutral\'})</p>\n            </div>\n        """\n        \n        if top_keywords:\n            html += """\n            <div>\n                <p><strong>Top Keywords:</strong></p>\n                <div class="keyword-list">\n            """\n            for keyword in top_keywords:\n                html += f\'<span class="keyword-tag">{keyword["keyword"]}</span>\'\n            html += "</div></div>"\n        \n        return html\n    \n    def _generate_keyword_list_html(self, keywords: List[Dict[str, Any]]) -> str:\n        """Generate keyword list HTML"""\n        if not keywords:\n            return ""\n        \n        html = """\n            <h2>📋 Complete Keyword List</h2>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Rank</th>\n                        <th>Keyword</th>\n                        <th>Frequency</th>\n                        <th>Score</th>\n                        <th>Method</th>\n                    </tr>\n                </thead>\n                <tbody>\n        """\n        \n        for i, keyword in enumerate(keywords, 1):\n            html += f"""\n                <tr>\n                    <td>{i}</td>\n                    <td><strong>{keyword[\'keyword\']}</strong></td>\n                    <td>{keyword[\'frequency\']}</td>\n                    <td>{keyword[\'score\']:.3f}</td>\n                    <td>{keyword.get(\'method\', \'unknown\')}</td>\n                </tr>\n            """\n        \n        html += """\n                </tbody>\n            </table>\n        """\n        \n        return html\n    \n    def _generate_technical_details_html(self, analysis_results: Dict[str, Any], \n                                       extraction_stats: Dict[str, Any]) -> str:\n        """Generate technical details HTML"""\n        html = "<div class=\'summary-box\'>"\n        \n        # Extraction statistics\n        if extraction_stats:\n            html += f"""\n                <h4>Data Extraction Statistics</h4>\n                <ul>\n                    <li>Posts Extracted: {extraction_stats.get(\'posts_extracted\', 0)}</li>\n                    <li>Errors Encountered: {extraction_stats.get(\'errors_count\', 0)}</li>\n                    <li>Success Rate: {extraction_stats.get(\'success_rate\', 0):.1f}%</li>\n                </ul>\n            """\n        \n        # Analysis parameters\n        if \'parameters\' in analysis_results:\n            params = analysis_results[\'parameters\']\n            html += f"""\n                <h4>Analysis Parameters</h4>\n                <ul>\n                    <li>Service: {params.get(\'service\', \'Unknown\')}</li>\n                    <li>Source: {params.get(\'source\', \'Unknown\')}</li>\n                    <li>Time Period: {params.get(\'days\', 0)} days</li>\n                    <li>Max Posts: {params.get(\'max_posts\', 0)}</li>\n                </ul>\n            """\n        \n        # Processing details\n        html += """\n            <h4>Processing Details</h4>\n            <ul>\n                <li>Sentiment Analysis: Multi-model approach (TextBlob + Transformers)</li>\n                <li>Keyword Extraction: Combined TF-IDF, Frequency, and TextRank</li>\n                <li>Language Support: French and English</li>\n                <li>Data Validation: Comprehensive filtering and cleaning</li>\n            </ul>\n        """\n        \n        html += "</div>"\n        return html\n    \n    def _generate_executive_summary(self, analysis_results: Dict[str, Any]) -> Dict[str, Any]:\n        """Generate executive summary"""\n        sentiment_summary = analysis_results.get(\'sentiment_summary\', {})\n        keywords = analysis_results.get(\'keywords\', [])\n        \n        if not sentiment_summary:\n            return {\'error\': \'No sentiment data available\'}\n        \n        total = sentiment_summary.get(\'total\', 0)\n        positive_pct = sentiment_summary.get(\'percentages\', {}).get(\'positive\', 0)\n        negative_pct = sentiment_summary.get(\'percentages\', {}).get(\'negative\', 0)\n        avg_polarity = sentiment_summary.get(\'average_polarity\', 0)\n        \n        # Key insights\n        insights = []\n        if positive_pct > 60:\n            insights.append("Strong positive sentiment indicates good customer satisfaction")\n        elif negative_pct > 40:\n            insights.append("Significant negative sentiment requires attention")\n        \n        # Top themes from keywords\n        top_keywords = [kw[\'keyword\'] for kw in keywords[:10]] if keywords else []\n        \n        return {\n            \'total_posts\': total,\n            \'sentiment_breakdown\': {\n                \'positive\': positive_pct,\n                \'negative\': negative_pct,\n                \'neutral\': 100 - positive_pct - negative_pct\n            },\n            \'overall_sentiment\': \'positive\' if avg_polarity > 0.1 else \'negative\' if avg_polarity < -0.1 else \'neutral\',\n            \'key_insights\': insights,\n            \'top_themes\': top_keywords\n        }\n    \n    def _generate_detailed_findings(self, analysis_results: Dict[str, Any]) -> List[Dict[str, Any]]:\n        """Generate detailed findings"""\n        findings = []\n        \n        # Sentiment findings\n        if \'sentiment_summary\' in analysis_results:\n            sentiment = analysis_results[\'sentiment_summary\']\n            findings.append({\n                \'category\': \'Sentiment Analysis\',\n                \'finding\': f"Overall sentiment is {sentiment.get(\'average_polarity\', 0):.3f} "\n                          f"({\'positive\' if sentiment.get(\'average_polarity\', 0) > 0.1 else \'negative\' if sentiment.get(\'average_polarity\', 0) < -0.1 else \'neutral\'})",\n                \'confidence\': sentiment.get(\'average_confidence\', 0)\n            })\n        \n        # Keyword findings\n        if \'keywords\' in analysis_results:\n            keywords = analysis_results[\'keywords\'][:5]\n            if keywords:\n                findings.append({\n                    \'category\': \'Key Themes\',\n                    \'finding\': f"Top themes include: {\', \'.join([kw[\'keyword\'] for kw in keywords])}",\n                    \'confidence\': 0.8\n                })\n        \n        # Temporal findings\n        if \'temporal_data\' in analysis_results:\n            findings.append({\n                \'category\': \'Temporal Analysis\',\n                \'finding\': \'Temporal sentiment trends analyzed\',\n                \'confidence\': 0.7\n            })\n        \n        return findings\n    \n    def _generate_recommendations(self, analysis_results: Dict[str, Any]) -> List[Dict[str, Any]]:\n        """Generate recommendations based on analysis"""\n        recommendations = []\n        \n        sentiment_summary = analysis_results.get(\'sentiment_summary\', {})\n        positive_pct = sentiment_summary.get(\'percentages\', {}).get(\'positive\', 0)\n        negative_pct = sentiment_summary.get(\'percentages\', {}).get(\'negative\', 0)\n        \n        if negative_pct > 30:\n            recommendations.append({\n                \'priority\': \'high\',\n                \'recommendation\': \'Address negative feedback themes identified in keyword analysis\',\n                \'rationale\': f\'{negative_pct:.1f}% negative sentiment requires attention\'\n            })\n        \n        if positive_pct > 70:\n            recommendations.append({\n                \'priority\': \'medium\',\n                \'recommendation\': \'Leverage positive sentiment in marketing efforts\',\n                \'rationale\': \'Strong positive response can be amplified\'\n            })\n        \n        recommendations.append({\n            \'priority\': \'medium\',\n            \'recommendation\': \'Monitor sentiment trends regularly\',\n            \'rationale\': \'Continuous monitoring helps identify emerging issues\'\n        })\n        \n        return recommendations\n    \n    def _generate_technical_details(self, analysis_results: Dict[str, Any]) -> Dict[str, Any]:\n        """Generate technical details"""\n        return {\n            \'extraction_method\': analysis_results.get(\'extraction_stats\', {}).get(\'method\', \'API + Scraping\'),\n            \'sentiment_models\': [\'TextBlob\', \'Transformers\'],\n            \'keyword_methods\': [\'TF-IDF\', \'Frequency\', \'TextRank\'],\n            \'languages_supported\': [\'French\', \'English\'],\n            \'data_validation\': \'Comprehensive filtering applied\',\n            \'sample_size\': analysis_results.get(\'sentiment_summary\', {}).get(\'total\', 0)\n        }\n</create-file>\n</function_calls>'}