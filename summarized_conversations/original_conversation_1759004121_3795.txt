{'role': 'assistant', 'content': 'Maintenant cr√©ons un exemple simple pour tester l\'application :\n\n<function_calls>\n<create-file file_path="examples/simple_test.py">\n#!/usr/bin/env python3\n"""\nSimple test script to verify the sentiment analysis functionality\n"""\n\nimport sys\nfrom pathlib import Path\n\n# Add src to path\nsrc_path = Path(__file__).parent.parent / \'src\'\nsys.path.insert(0, str(src_path))\n\nfrom src.nlp.sentiment_analyzer import SentimentAnalyzer\nfrom src.nlp.keyword_extractor import KeywordExtractor\nfrom src.visualization.charts_generator import ChartsGenerator\n\ndef test_sentiment_analysis():\n    """Test sentiment analysis with sample texts"""\n    print("üß™ Testing Sentiment Analysis")\n    print("-" * 40)\n    \n    # Sample texts in French and English\n    test_texts = [\n        "J\'adore ce produit, il est excellent !",\n        "Ce service est vraiment nul, je d√©teste.",\n        "C\'est correct, sans plus.",\n        "I love this product, it\'s amazing!",\n        "This service is terrible, I hate it.",\n        "It\'s okay, nothing special."\n    ]\n    \n    analyzer = SentimentAnalyzer()\n    \n    for i, text in enumerate(test_texts, 1):\n        result = analyzer.analyze_sentiment(text)\n        print(f"\\n{i}. Text: {text}")\n        print(f"   Language: {result.get(\'language\', \'auto\')}")\n        print(f"   Sentiment: {result[\'sentiment\']}")\n        print(f"   Polarity: {result[\'polarity\']:.3f}")\n        print(f"   Confidence: {result[\'confidence\']:.3f}")\n        print(f"   Method: {result[\'method\']}")\n\ndef test_keyword_extraction():\n    """Test keyword extraction"""\n    print("\\n\\nüîë Testing Keyword Extraction")\n    print("-" * 40)\n    \n    # Sample corpus\n    texts = [\n        "Le service client est excellent et tr√®s r√©actif.",\n        "La qualit√© du produit est remarquable.",\n        "Service rapide et efficace avec un bon support.",\n        "Excellent rapport qualit√©-prix, je recommande.",\n        "Le support technique est tr√®s professionnel."\n    ]\n    \n    extractor = KeywordExtractor(max_keywords=10)\n    \n    # Test frequency method (should work without issues)\n    print("\\nUsing Frequency Method:")\n    keywords = extractor.extract_keywords(texts, method=\'frequency\')\n    \n    for i, kw in enumerate(keywords[:5], 1):\n        print(f"{i}. {kw[\'keyword\']} (freq: {kw[\'frequency\']}, score: {kw[\'score\']:.3f})")\n\ndef test_visualizations():\n    """Test visualization generation"""\n    print("\\n\\nüìä Testing Visualizations")\n    print("-" * 40)\n    \n    # Create sample data\n    sentiment_summary = {\n        \'total\': 50,\n        \'positive\': 25,\n        \'negative\': 10,\n        \'neutral\': 15,\n        \'percentages\': {\'positive\': 50.0, \'negative\': 20.0, \'neutral\': 30.0},\n        \'average_polarity\': 0.3,\n        \'average_confidence\': 0.8\n    }\n    \n    keywords = [\n        {\'keyword\': \'service\', \'score\': 0.9, \'frequency\': 15},\n        {\'keyword\': \'quality\', \'score\': 0.8, \'frequency\': 12},\n        {\'keyword\': \'excellent\', \'score\': 0.7, \'frequency\': 10},\n        {\'keyword\': \'support\', \'score\': 0.6, \'frequency\': 8},\n        {\'keyword\': \'recommend\', \'score\': 0.5, \'frequency\': 6}\n    ]\n    \n    chart_gen = ChartsGenerator()\n    \n    try:\n        # Test pie chart\n        fig1 = chart_gen.create_sentiment_pie_chart(sentiment_summary)\n        print("‚úÖ Sentiment pie chart created")\n        \n        # Test bar chart\n        fig2 = chart_gen.create_sentiment_bar_chart(sentiment_summary)\n        print("‚úÖ Sentiment bar chart created")\n        \n        # Test keyword chart\n        fig3 = chart_gen.create_keyword_frequency_chart(keywords)\n        print("‚úÖ Keyword frequency chart created")\n        \n        print("\\nüìà All visualizations created successfully!")\n        \n    except Exception as e:\n        print(f"‚ö†Ô∏è Visualization error: {e}")\n\ndef main():\n    """Run all tests"""\n    print("üöÄ Social Media Sentiment Analysis - Simple Test")\n    print("=" * 60)\n    print("Testing core functionality without external dependencies...\\n")\n    \n    try:\n        test_sentiment_analysis()\n        test_keyword_extraction()\n        test_visualizations()\n        \n        print("\\n" + "=" * 60)\n        print("‚úÖ All tests completed successfully!")\n        print("\\nThe application core functionality is working correctly.")\n        print("To run full analysis with real data, configure API keys in .env file")\n        \n    except Exception as e:\n        print(f"\\n‚ùå Test failed: {e}")\n        return 1\n    \n    return 0\n\nif __name__ == \'__main__\':\n    sys.exit(main())\n</create-file>\n</function_calls>'}