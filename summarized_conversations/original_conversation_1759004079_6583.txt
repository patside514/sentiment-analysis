{'role': 'assistant', 'content': 'Maintenant, créons le système de logging et les utilitaires de base.\n\n<function_calls>\n<create-file file_path="src/utils/logger.py">\n"""\nLogging utility for the social media sentiment analysis application.\nProvides structured logging with rotation and multiple handlers.\n"""\nimport logging\nimport logging.handlers\nimport sys\nfrom pathlib import Path\nfrom typing import Optional\n\nfrom ..config import LoggingConfig, OUTPUTS_DIR\n\nclass Logger:\n    """Custom logger with file and console handlers"""\n    \n    def __init__(self, name: str, log_file: Optional[Path] = None):\n        self.name = name\n        self.log_file = log_file or LoggingConfig.LOG_FILE\n        self.logger = self._setup_logger()\n    \n    def _setup_logger(self) -> logging.Logger:\n        """Setup logger with handlers"""\n        logger = logging.getLogger(self.name)\n        logger.setLevel(getattr(logging, LoggingConfig.LOG_LEVEL))\n        \n        # Avoid duplicate handlers\n        if logger.handlers:\n            return logger\n        \n        # Create formatters\n        formatter = logging.Formatter(LoggingConfig.LOG_FORMAT)\n        \n        # Console handler\n        console_handler = logging.StreamHandler(sys.stdout)\n        console_handler.setLevel(logging.INFO)\n        console_handler.setFormatter(formatter)\n        logger.addHandler(console_handler)\n        \n        # File handler with rotation\n        try:\n            # Ensure output directory exists\n            self.log_file.parent.mkdir(parents=True, exist_ok=True)\n            \n            file_handler = logging.handlers.RotatingFileHandler(\n                self.log_file,\n                maxBytes=LoggingConfig.LOG_MAX_BYTES,\n                backupCount=LoggingConfig.LOG_BACKUP_COUNT,\n                encoding=\'utf-8\'\n            )\n            file_handler.setLevel(logging.DEBUG)\n            file_handler.setFormatter(formatter)\n            logger.addHandler(file_handler)\n        except Exception as e:\n            logger.warning(f"Could not setup file handler: {e}")\n        \n        return logger\n    \n    def debug(self, message: str, **kwargs):\n        self.logger.debug(message, **kwargs)\n    \n    def info(self, message: str, **kwargs):\n        self.logger.info(message, **kwargs)\n    \n    def warning(self, message: str, **kwargs):\n        self.logger.warning(message, **kwargs)\n    \n    def error(self, message: str, **kwargs):\n        self.logger.error(message, **kwargs)\n    \n    def exception(self, message: str, **kwargs):\n        self.logger.exception(message, **kwargs)\n\ndef get_logger(name: str) -> Logger:\n    """Get a configured logger instance"""\n    return Logger(name)\n\n# Global logger instance\napp_logger = get_logger("app")\n</create-file>\n</function_calls>\n</function_calls>'}