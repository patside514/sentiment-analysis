{'role': 'assistant', 'content': 'Parfait ! Le mode dry-run fonctionne parfaitement. Maintenant cr√©ons un exemple de test avec des donn√©es simul√©es pour d√©montrer les fonctionnalit√©s :\n\n<function_calls>\n<create-file file_path="examples/demo_analysis.py">\n#!/usr/bin/env python3\n"""\nDemo script to showcase the social media sentiment analysis capabilities\nusing simulated data when APIs are not available.\n"""\n\nimport sys\nimport random\nfrom datetime import datetime, timedelta\nfrom pathlib import Path\n\n# Add src to path\nsrc_path = Path(__file__).parent.parent / \'src\'\nsys.path.insert(0, str(src_path))\n\nfrom src.main import SocialMediaAnalyzer\nfrom src.nlp.sentiment_analyzer import SentimentAnalyzer\nfrom src.nlp.keyword_extractor import KeywordExtractor\nfrom src.visualization.charts_generator import ChartsGenerator\nfrom src.visualization.wordcloud_generator import WordCloudGenerator\nfrom src.utils.file_manager import FileManager\n\ndef generate_demo_data(service="DemoService", num_posts=100):\n    """Generate realistic demo data for testing"""\n    \n    # Sample positive, negative, and neutral texts\n    positive_texts = [\n        f"J\'adore {service} ! C\'est vraiment g√©nial et super pratique.",\n        f"{service} est excellent, je recommande vivement !",\n        f"Service impeccable avec {service}, toujours satisfait.",\n        f"{service} a chang√© ma vie, c\'est incroyable !",\n        f"Que du positif avec {service}, bravo √† l\'√©quipe !",\n        f"Je suis fan de {service}, c\'est le meilleur !",\n        f"{service} est top qualit√©, je suis tr√®s content.",\n        f"Excellent service client chez {service}, tr√®s r√©actif.",\n        f"{service} est fiable et efficace, parfait !",\n        f"Super exp√©rience avec {service}, je recommande !"\n    ]\n    \n    negative_texts = [\n        f"{service} est d√©cevant, je ne suis pas satisfait.",\n        f"Service m√©diocre avec {service}, √† √©viter.",\n        f"Je d√©teste {service}, c\'est nul.",\n        f"{service} ne fonctionne pas correctement, probl√©matique.",\n        f"Mauvaise exp√©rience avec {service}, d√©√ßu.",\n        f"{service} est lent et bugu√©, pas content.",\n        f"Service client inexistant chez {service}, catastrophe.",\n        f"{service} est trop cher pour ce que c\'est.",\n        f"Je regrette d\'avoir choisi {service}, mauvais choix.",\n        f"{service} ne vaut pas le prix, d√©ception."\n    ]\n    \n    neutral_texts = [\n        f"{service} est un service que j\'utilise r√©guli√®rement.",\n        f"J\'ai test√© {service}, c\'est correct sans plus.",\n        f"{service} fait le job, rien de sp√©cial √† signaler.",\n        f"Utilisation normale de {service}, sans probl√®me.",\n        f"{service} est comme les autres, standard.",\n        f"Rien √† dire sur {service}, c\'est passable.",\n        f"Service moyen avec {service}, ni bon ni mauvais.",\n        f"{service} remplit ses fonctions basiques.",\n        f"Exp√©rience normale avec {service}, sans surprise.",\n        f"{service} est utilisable, c\'est le principal."\n    ]\n    \n    # Generate mixed data\n    demo_data = []\n    base_date = datetime.now() - timedelta(days=30)\n    \n    for i in range(num_posts):\n        # Random sentiment distribution (40% positive, 30% negative, 30% neutral)\n        sentiment_choice = random.choices([\'positive\', \'negative\', \'neutral\'], weights=[40, 30, 30])[0]\n        \n        if sentiment_choice == \'positive\':\n            text = random.choice(positive_texts)\n        elif sentiment_choice == \'negative\':\n            text = random.choice(negative_texts)\n        else:\n            text = random.choice(neutral_texts)\n        \n        # Add some variation\n        if random.random() > 0.7:\n            text += f" #{service}{random.randint(1, 100)}"\n        \n        # Generate random date within the last 30 days\n        random_date = base_date + timedelta(days=random.randint(0, 30), hours=random.randint(0, 23))\n        \n        post = {\n            \'id\': f"demo_post_{i+1}",\n            \'text\': text,\n            \'created_at\': random_date.isoformat(),\n            \'source\': \'demo\',\n            \'service\': service,\n            \'likes\': random.randint(0, 100),\n            \'shares\': random.randint(0, 50),\n            \'comments\': random.randint(0, 20)\n        }\n        \n        demo_data.append(post)\n    \n    return demo_data\n\ndef demo_sentiment_analysis():\n    """Demonstrate sentiment analysis capabilities"""\n    print("üß† Demo: Sentiment Analysis")\n    print("=" * 50)\n    \n    # Sample texts\n    sample_texts = [\n        "J\'adore ce produit ! Il est g√©nial et tr√®s pratique.",\n        "Ce service est nul, je d√©teste vraiment.",\n        "C\'est correct, sans plus. Rien de sp√©cial.",\n        "Excellent service client, tr√®s r√©actif et professionnel.",\n        "D√©√ßu par la qualit√©, √ßa ne vaut pas le prix."\n    ]\n    \n    # Initialize analyzer\n    analyzer = SentimentAnalyzer()\n    \n    print("\\nAnalyzing sample texts:")\n    for i, text in enumerate(sample_texts, 1):\n        result = analyzer.analyze_sentiment(text, language=\'fr\')\n        print(f"\\n{i}. Text: {text[:50]}...")\n        print(f"   Sentiment: {result[\'sentiment\']} (confidence: {result[\'confidence\']:.3f})")\n        print(f"   Polarity: {result[\'polarity\']:.3f}")\n    \n    # Batch analysis\n    print(f"\\nüìä Batch analysis summary:")\n    results = analyzer.analyze_batch(sample_texts, language=\'fr\')\n    summary = analyzer.get_sentiment_summary(results)\n    \n    print(f"Total texts: {summary[\'total\']}")\n    print(f"Positive: {summary[\'positive\']} ({summary[\'percentages\'][\'positive\']:.1f}%)")\n    print(f"Negative: {summary[\'negative\']} ({summary[\'percentages\'][\'negative\']:.1f}%)")\n    print(f"Neutral: {summary[\'neutral\']} ({summary[\'percentages\'][\'neutral\']:.1f}%)")\n\ndef demo_keyword_extraction():\n    """Demonstrate keyword extraction capabilities"""\n    print("\\n\\nüîë Demo: Keyword Extraction")\n    print("=" * 50)\n    \n    # Sample corpus\n    sample_texts = [\n        "Le service client est excellent et tr√®s r√©actif. J\'appr√©cie beaucoup la qualit√© du support.",\n        "La qualit√© du produit est remarquable, excellent rapport qualit√©-prix.",\n        "Service rapide et efficace, je recommande vivement cette entreprise.",\n        "Excellent service, tr√®s professionnel et r√©actif. Qualit√© sup√©rieure.",\n        "Le support technique est de grande qualit√©, service client exceptionnel."\n    ]\n    \n    # Initialize extractor\n    extractor = KeywordExtractor(max_keywords=10)\n    \n    print("\\nExtracting keywords using different methods:")\n    \n    methods = [\'tfidf\', \'frequency\', \'textrank\', \'combined\']\n    for method in methods:\n        print(f"\\nüìç Method: {method.upper()}")\n        keywords = extractor.extract_keywords(sample_texts, method=method)\n        \n        for i, kw in enumerate(keywords[:5], 1):\n            print(f"   {i}. {kw[\'keyword\']} (score: {kw[\'score\']:.3f}, freq: {kw[\'frequency\']})")\n\ndef demo_visualizations():\n    """Demonstrate visualization capabilities"""\n    print("\\n\\nüìä Demo: Visualizations")\n    print("=" * 50)\n    \n    # Create sample sentiment data\n    sentiment_summary = {\n        \'total\': 100,\n        \'positive\': 45,\n        \'negative\': 25,\n        \'neutral\': 30,\n        \'percentages\': {\n            \'positive\': 45.0,\n            \'negative\': 25.0,\n            \'neutral\': 30.0\n        },\n        \'average_polarity\': 0.15,\n        \'average_confidence\': 0.75\n    }\n    \n    # Create sample keyword data\n    keywords = [\n        {\'keyword\': \'service client\', \'score\': 0.95, \'frequency\': 25, \'method\': \'combined\'},\n        {\'keyword\': \'qualit√©\', \'score\': 0.88, \'frequency\': 20, \'method\': \'combined\'},\n        {\'keyword\': \'excellent\', \'score\': 0.82, \'frequency\': 18, \'method\': \'combined\'},\n        {\'keyword\': \'r√©actif\', \'score\': 0.75, \'frequency\': 15, \'method\': \'combined\'},\n        {\'keyword\': \'professionnel\', \'score\': 0.68, \'frequency\': 12, \'method\': \'combined\'}\n    ]\n    \n    # Initialize chart generator\n    chart_gen = ChartsGenerator()\n    \n    print("Generating sample visualizations...")\n    \n    # Generate charts\n    try:\n        # Pie chart\n        fig1 = chart_gen.create_sentiment_pie_chart(sentiment_summary, "Demo Sentiment Distribution")\n        print("‚úÖ Sentiment pie chart generated")\n        \n        # Bar chart\n        fig2 = chart_gen.create_sentiment_bar_chart(sentiment_summary, "Demo Sentiment Analysis")\n        print("‚úÖ Sentiment bar chart generated")\n        \n        # Keyword charts\n        fig3 = chart_gen.create_keyword_frequency_chart(keywords, "Demo Keywords")\n        print("‚úÖ Keyword frequency chart generated")\n        \n        # Dashboard\n        demo_results = {\n            \'sentiment_summary\': sentiment_summary,\n            \'keywords\': keywords,\n            \'temporal_data\': [],\n            \'sentiment_results\': []\n        }\n        fig4 = chart_gen.create_overall_summary_chart(demo_results, "Demo Dashboard")\n        print("‚úÖ Summary dashboard generated")\n        \n        print("\\nüìà Visualizations created successfully!")\n        \n    except Exception as e:\n        print(f"‚ö†Ô∏è  Visualization error: {e}")\n\ndef demo_complete_analysis():\n    """Demonstrate complete analysis workflow"""\n    print("\\n\\nüöÄ Demo: Complete Analysis Workflow")\n    print("=" * 50)\n    \n    # Generate demo data\n    print("Generating demo data...")\n    demo_data = generate_demo_data("DemoService", 50)\n    \n    print(f"‚úÖ Generated {len(demo_data)} demo posts")\n    \n    # Simulate analysis\n    print("\\nSimulating complete analysis...")\n    \n    # Initialize components\n    analyzer = SocialMediaAnalyzer()\n    file_manager = FileManager()\n    \n    try:\n        # Simulate sentiment analysis\n        sentiment_analyzer = SentimentAnalyzer()\n        sentiment_results = []\n        \n        for item in demo_data:\n            result = sentiment_analyzer.analyze_sentiment(item[\'text\'], \'fr\')\n            result.update({\n                \'id\': item[\'id\'],\n                \'date\': item[\'created_at\'],\n                \'original_text\': item[\'text\']\n            })\n            sentiment_results.append(result)\n        \n        # Simulate keyword extraction\n        keyword_extractor = KeywordExtractor(max_keywords=15)\n        texts = [item[\'text\'] for item in demo_data]\n        keywords = keyword_extractor.extract_keywords(texts, \'combined\')\n        \n        # Create results structure\n        results = {\n            \'metadata\': {\n                \'service\': \'DemoService\',\n                \'source\': \'demo\',\n                \'analysis_date\': datetime.now().isoformat(),\n                \'parameters\': {\n                    \'days\': 30,\n                    \'max_posts\': 50\n                }\n            },\n            \'sentiment_results\': sentiment_results,\n            \'sentiment_summary\': sentiment_analyzer.get_sentiment_summary(sentiment_results),\n            \'keywords\': keywords,\n            \'raw_data\': demo_data,\n            \'success\': True\n        }\n        \n        # Save results\n        output_dir = file_manager.save_analysis_report(results, \'DemoService\', \'demo\')\n        \n        print(f"‚úÖ Analysis completed successfully!")\n        print(f"üìÅ Results saved to: {output_dir}")\n        \n        # Display summary\n        summary = results[\'sentiment_summary\']\n        print(f"\\nüìä Sentiment Summary:")\n        print(f"   Total posts: {summary[\'total\']}")\n        print(f"   Positive: {summary[\'positive\']} ({summary[\'percentages\'][\'positive\']:.1f}%)")\n        print(f"   Negative: {summary[\'negative\']} ({summary[\'percentages\'][\'negative\']:.1f}%)")\n        print(f"   Neutral: {summary[\'neutral\']} ({summary[\'percentages\'][\'neutral\']:.1f}%)")\n        \n        print(f"\\nüîë Top Keywords:")\n        for i, kw in enumerate(keywords[:5], 1):\n            print(f"   {i}. {kw[\'keyword\']} (score: {kw[\'score\']:.3f})")\n        \n    except Exception as e:\n        print(f"‚ùå Analysis error: {e}")\n\ndef main():\n    """Main demo function"""\n    print("üéØ Social Media Sentiment Analysis - Demo")\n    print("=" * 60)\n    print("This demo showcases the capabilities of the sentiment analysis tool")\n    print("using simulated data when APIs are not available.\\n")\n    \n    # Run individual demos\n    demo_sentiment_analysis()\n    demo_keyword_extraction()\n    demo_visualizations()\n    demo_complete_analysis()\n    \n    print("\\n" + "=" * 60)\n    print("‚úÖ Demo completed successfully!")\n    print("\\nTo run real analysis with actual social media data:")\n    print("1. Configure your API keys in .env file")\n    print("2. Run: python app.py --service \'YourService\' --source \'twitter\' --days 30")\n    print("\\nFor more options, run: python app.py --help")\n\nif __name__ == \'__main__\':\n    main()\n</create-file>\n</function_calls>'}