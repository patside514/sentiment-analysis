{'role': 'assistant', 'content': 'Maintenant, créons les modules de visualisation pour générer les graphiques et rapports.\n\n<function_calls>\n<create-file file_path="src/visualization/charts_generator.py">\n"""\nCharts and visualization generator for sentiment analysis results.\nCreates various types of charts using matplotlib and seaborn.\n"""\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\nfrom datetime import datetime\nfrom typing import List, Dict, Any, Optional, Tuple\nimport matplotlib.dates as mdates\nfrom matplotlib.patches import Rectangle\n\nfrom ..config import VizConfig\nfrom ..utils.logger import get_logger\n\nlogger = get_logger(__name__)\n\nclass ChartsGenerator:\n    """Generate various charts for sentiment analysis"""\n    \n    def __init__(self, style: str = None):\n        self.style = style or VizConfig.PLOT_STYLE\n        plt.style.use(self.style)\n        self.colors = sns.color_palette(VizConfig.COLOR_PALETTE)\n        \n    def create_sentiment_pie_chart(self, sentiment_summary: Dict[str, Any], \n                                 title: str = "Sentiment Distribution",\n                                 save_path: Optional[str] = None) -> plt.Figure:\n        """Create pie chart for sentiment distribution"""\n        try:\n            fig, ax = plt.subplots(figsize=(10, 8))\n            \n            # Prepare data\n            labels = [\'Positive\', \'Negative\', \'Neutral\']\n            sizes = [\n                sentiment_summary[\'percentages\'][\'positive\'],\n                sentiment_summary[\'percentages\'][\'negative\'],\n                sentiment_summary[\'percentages\'][\'neutral\']\n            ]\n            colors = [\'#2E8B57\', \'#DC143C\', \'#808080\']  # Green, Red, Gray\n            \n            # Create pie chart\n            wedges, texts, autotexts = ax.pie(\n                sizes,\n                labels=labels,\n                colors=colors,\n                autopct=\'%1.1f%%\',\n                startangle=90,\n                explode=(0.05, 0.05, 0.05)\n            )\n            \n            # Customize\n            ax.set_title(title, fontsize=16, fontweight=\'bold\', pad=20)\n            \n            # Style text\n            for autotext in autotexts:\n                autotext.set_color(\'white\')\n                autotext.set_fontweight(\'bold\')\n                autotext.set_fontsize(12)\n            \n            # Add count information\n            total = sentiment_summary[\'total\']\n            counts = [\n                sentiment_summary[\'positive\'],\n                sentiment_summary[\'negative\'],\n                sentiment_summary[\'neutral\']\n            ]\n            \n            legend_labels = [\n                f"{label}: {count} ({size:.1f}%)" \n                for label, count, size in zip(labels, counts, sizes)\n            ]\n            \n            ax.legend(\n                wedges, legend_labels,\n                title="Sentiment Counts",\n                loc="center left",\n                bbox_to_anchor=(1, 0, 0.5, 1)\n            )\n            \n            plt.tight_layout()\n            \n            if save_path:\n                plt.savefig(save_path, dpi=300, bbox_inches=\'tight\')\n                logger.info(f"Sentiment pie chart saved to {save_path}")\n            \n            return fig\n            \n        except Exception as e:\n            logger.error(f"Error creating sentiment pie chart: {e}")\n            return self._create_error_chart("Sentiment Pie Chart")\n    \n    def create_sentiment_bar_chart(self, sentiment_summary: Dict[str, Any],\n                                 title: str = "Sentiment Analysis Results",\n                                 save_path: Optional[str] = None) -> plt.Figure:\n        """Create bar chart for sentiment analysis"""\n        try:\n            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))\n            \n            # Left chart: Counts\n            sentiments = [\'Positive\', \'Negative\', \'Neutral\']\n            counts = [\n                sentiment_summary[\'positive\'],\n                sentiment_summary[\'negative\'],\n                sentiment_summary[\'neutral\']\n            ]\n            colors = [\'#2E8B57\', \'#DC143C\', \'#808080\']\n            \n            bars1 = ax1.bar(sentiments, counts, color=colors, alpha=0.8)\n            ax1.set_title(\'Sentiment Counts\', fontsize=14, fontweight=\'bold\')\n            ax1.set_ylabel(\'Number of Posts\')\n            \n            # Add value labels on bars\n            for bar, count in zip(bars1, counts):\n                height = bar.get_height()\n                ax1.text(\n                    bar.get_x() + bar.get_width()/2., height + max(counts)*0.01,\n                    f\'{count}\', ha=\'center\', va=\'bottom\', fontweight=\'bold\'\n                )\n            \n            # Right chart: Percentages\n            percentages = [\n                sentiment_summary[\'percentages\'][\'positive\'],\n                sentiment_summary[\'percentages\'][\'negative\'],\n                sentiment_summary[\'percentages\'][\'neutral\']\n            ]\n            \n            bars2 = ax2.bar(sentiments, percentages, color=colors, alpha=0.8)\n            ax2.set_title(\'Sentiment Percentages\', fontsize=14, fontweight=\'bold\')\n            ax2.set_ylabel(\'Percentage (%)\')\n            \n            # Add percentage labels\n            for bar, pct in zip(bars2, percentages):\n                height = bar.get_height()\n                ax2.text(\n                    bar.get_x() + bar.get_width()/2., height + max(percentages)*0.01,\n                    f\'{pct:.1f}%\', ha=\'center\', va=\'bottom\', fontweight=\'bold\'\n                )\n            \n            # Overall title\n            fig.suptitle(title, fontsize=16, fontweight=\'bold\', y=1.02)\n            \n            # Add statistics\n            stats_text = (\n                f"Total Posts: {sentiment_summary[\'total\']}\\n"\n                f"Avg Polarity: {sentiment_summary.get(\'average_polarity\', 0):.3f}\\n"\n                f"Avg Confidence: {sentiment_summary.get(\'average_confidence\', 0):.3f}"\n            )\n            \n            fig.text(0.02, 0.02, stats_text, fontsize=10, \n                    bbox=dict(boxstyle="round,pad=0.3", facecolor="lightgray", alpha=0.5))\n            \n            plt.tight_layout()\n            \n            if save_path:\n                plt.savefig(save_path, dpi=300, bbox_inches=\'tight\')\n                logger.info(f"Sentiment bar chart saved to {save_path}")\n            \n            return fig\n            \n        except Exception as e:\n            logger.error(f"Error creating sentiment bar chart: {e}")\n            return self._create_error_chart("Sentiment Bar Chart")\n    \n    def create_sentiment_trend_chart(self, temporal_data: List[Dict[str, Any]],\n                                   title: str = "Sentiment Trends Over Time",\n                                   save_path: Optional[str] = None) -> plt.Figure:\n        """Create line chart for sentiment trends"""\n        try:\n            if not temporal_data:\n                return self._create_empty_chart("No temporal data available")\n            \n            fig, ax = plt.subplots(figsize=(12, 6))\n            \n            # Prepare data\n            df = pd.DataFrame(temporal_data)\n            df[\'date\'] = pd.to_datetime(df[\'date\'])\n            df = df.sort_values(\'date\')\n            \n            # Group by date and sentiment\n            daily_sentiment = df.groupby([\'date\', \'sentiment\']).size().unstack(fill_value=0)\n            \n            # Ensure all sentiment columns exist\n            for sentiment in [\'positive\', \'negative\', \'neutral\']:\n                if sentiment not in daily_sentiment.columns:\n                    daily_sentiment[sentiment] = 0\n            \n            # Calculate percentages\n            daily_totals = daily_sentiment.sum(axis=1)\n            daily_percentages = daily_sentiment.div(daily_totals, axis=0) * 100\n            \n            # Plot lines\n            colors = {\'positive\': \'#2E8B57\', \'negative\': \'#DC143C\', \'neutral\': \'#808080\'}\n            \n            for sentiment in [\'positive\', \'negative\', \'neutral\']:\n                if sentiment in daily_percentages.columns:\n                    ax.plot(\n                        daily_percentages.index,\n                        daily_percentages[sentiment],\n                        label=sentiment.capitalize(),\n                        color=colors[sentiment],\n                        linewidth=2,\n                        marker=\'o\',\n                        markersize=4\n                    )\n            \n            # Customize\n            ax.set_title(title, fontsize=14, fontweight=\'bold\')\n            ax.set_xlabel(\'Date\')\n            ax.set_ylabel(\'Percentage (%)\')\n            ax.legend(loc=\'best\')\n            ax.grid(True, alpha=0.3)\n            \n            # Format x-axis\n            ax.xaxis.set_major_formatter(mdates.DateFormatter(\'%Y-%m-%d\'))\n            ax.xaxis.set_major_locator(mdates.DayLocator(interval=7))\n            plt.xticks(rotation=45)\n            \n            plt.tight_layout()\n            \n            if save_path:\n                plt.savefig(save_path, dpi=300, bbox_inches=\'tight\')\n                logger.info(f"Sentiment trend chart saved to {save_path}")\n            \n            return fig\n            \n        except Exception as e:\n            logger.error(f"Error creating sentiment trend chart: {e}")\n            return self._create_error_chart("Sentiment Trend Chart")\n    \n    def create_keyword_frequency_chart(self, keywords: List[Dict[str, Any]],\n                                     title: str = "Top Keywords by Frequency",\n                                     top_n: int = 20,\n                                     save_path: Optional[str] = None) -> plt.Figure:\n        """Create horizontal bar chart for keywords"""\n        try:\n            if not keywords:\n                return self._create_empty_chart("No keywords available")\n            \n            fig, ax = plt.subplots(figsize=(10, 8))\n            \n            # Sort keywords by frequency\n            sorted_keywords = sorted(keywords, key=lambda x: x[\'frequency\'], reverse=True)[:top_n]\n            \n            # Prepare data\n            keyword_names = [kw[\'keyword\'] for kw in reversed(sorted_keywords)]\n            frequencies = [kw[\'frequency\'] for kw in reversed(sorted_keywords)]\n            \n            # Create horizontal bar chart\n            bars = ax.barh(keyword_names, frequencies, color=self.colors[0], alpha=0.8)\n            \n            # Customize\n            ax.set_title(title, fontsize=14, fontweight=\'bold\')\n            ax.set_xlabel(\'Frequency\')\n            \n            # Add value labels\n            for bar, freq in zip(bars, frequencies):\n                width = bar.get_width()\n                ax.text(\n                    width + max(frequencies)*0.01, bar.get_y() + bar.get_height()/2.,\n                    f\'{freq}\', ha=\'left\', va=\'center\', fontweight=\'bold\'\n                )\n            \n            # Improve layout\n            plt.tight_layout()\n            \n            if save_path:\n                plt.savefig(save_path, dpi=300, bbox_inches=\'tight\')\n                logger.info(f"Keyword frequency chart saved to {save_path}")\n            \n            return fig\n            \n        except Exception as e:\n            logger.error(f"Error creating keyword frequency chart: {e}")\n            return self._create_error_chart("Keyword Frequency Chart")\n    \n    def create_keyword_score_chart(self, keywords: List[Dict[str, Any]],\n                                 title: str = "Top Keywords by Relevance Score",\n                                 top_n: int = 20,\n                                 save_path: Optional[str] = None) -> plt.Figure:\n        """Create chart for keyword relevance scores"""\n        try:\n            if not keywords:\n                return self._create_empty_chart("No keywords available")\n            \n            fig, ax = plt.subplots(figsize=(10, 8))\n            \n            # Sort keywords by score\n            sorted_keywords = sorted(keywords, key=lambda x: x[\'score\'], reverse=True)[:top_n]\n            \n            # Prepare data\n            keyword_names = [kw[\'keyword\'] for kw in reversed(sorted_keywords)]\n            scores = [kw[\'score\'] for kw in reversed(sorted_keywords)]\n            \n            # Create horizontal bar chart\n            colors = plt.cm.viridis(np.linspace(0, 1, len(scores)))\n            bars = ax.barh(keyword_names, scores, color=colors, alpha=0.8)\n            \n            # Customize\n            ax.set_title(title, fontsize=14, fontweight=\'bold\')\n            ax.set_xlabel(\'Relevance Score\')\n            \n            # Add value labels\n            for bar, score in zip(bars, scores):\n                width = bar.get_width()\n                ax.text(\n                    width + max(scores)*0.01, bar.get_y() + bar.get_height()/2.,\n                    f\'{score:.3f}\', ha=\'left\', va=\'center\', fontweight=\'bold\'\n                )\n            \n            plt.tight_layout()\n            \n            if save_path:\n                plt.savefig(save_path, dpi=300, bbox_inches=\'tight\')\n                logger.info(f"Keyword score chart saved to {save_path}")\n            \n            return fig\n            \n        except Exception as e:\n            logger.error(f"Error creating keyword score chart: {e}")\n            return self._create_error_chart("Keyword Score Chart")\n    \n    def create_sentiment_confidence_chart(self, sentiment_results: List[Dict[str, Any]],\n                                        title: str = "Sentiment Analysis Confidence Distribution",\n                                        save_path: Optional[str] = None) -> plt.Figure:\n        """Create histogram for sentiment confidence scores"""\n        try:\n            if not sentiment_results:\n                return self._create_empty_chart("No sentiment results available")\n            \n            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))\n            \n            # Extract confidence scores by sentiment\n            confidence_by_sentiment = {\n                \'positive\': [r[\'confidence\'] for r in sentiment_results if r[\'sentiment\'] == \'positive\'],\n                \'negative\': [r[\'confidence\'] for r in sentiment_results if r[\'sentiment\'] == \'negative\'],\n                \'neutral\': [r[\'confidence\'] for r in sentiment_results if r[\'sentiment\'] == \'neutral\']\n            }\n            \n            colors = {\'positive\': \'#2E8B57\', \'negative\': \'#DC143C\', \'neutral\': \'#808080\'}\n            \n            # Left chart: Histogram\n            for sentiment, confidences in confidence_by_sentiment.items():\n                if confidences:\n                    ax1.hist(\n                        confidences,\n                        bins=20,\n                        alpha=0.6,\n                        label=sentiment.capitalize(),\n                        color=colors[sentiment]\n                    )\n            \n            ax1.set_title(\'Confidence Score Distribution\', fontsize=14, fontweight=\'bold\')\n            ax1.set_xlabel(\'Confidence Score\')\n            ax1.set_ylabel(\'Frequency\')\n            ax1.legend()\n            ax1.grid(True, alpha=0.3)\n            \n            # Right chart: Box plot\n            confidence_data = []\n            labels = []\n            \n            for sentiment, confidences in confidence_by_sentiment.items():\n                if confidences:\n                    confidence_data.append(confidences)\n                    labels.append(sentiment.capitalize())\n            \n            if confidence_data:\n                box_plot = ax2.boxplot(\n                    confidence_data,\n                    labels=labels,\n                    patch_artist=True\n                )\n                \n                # Color the boxes\n                for patch, sentiment in zip(box_plot[\'boxes\'], labels):\n                    patch.set_facecolor(colors[sentiment.lower()])\n                    patch.set_alpha(0.6)\n            \n            ax2.set_title(\'Confidence Score Statistics\', fontsize=14, fontweight=\'bold\')\n            ax2.set_ylabel(\'Confidence Score\')\n            ax2.grid(True, alpha=0.3)\n            \n            # Overall title\n            fig.suptitle(title, fontsize=16, fontweight=\'bold\', y=1.02)\n            \n            plt.tight_layout()\n            \n            if save_path:\n                plt.savefig(save_path, dpi=300, bbox_inches=\'tight\')\n                logger.info(f"Sentiment confidence chart saved to {save_path}")\n            \n            return fig\n            \n        except Exception as e:\n            logger.error(f"Error creating sentiment confidence chart: {e}")\n            return self._create_error_chart("Sentiment Confidence Chart")\n    \n    def create_overall_summary_chart(self, analysis_results: Dict[str, Any],\n                                   title: str = "Analysis Summary Dashboard",\n                                   save_path: Optional[str] = None) -> plt.Figure:\n        """Create comprehensive summary dashboard"""\n        try:\n            fig = plt.figure(figsize=(16, 10))\n            \n            # Create grid layout\n            gs = fig.add_gridspec(3, 3, hspace=0.3, wspace=0.3)\n            \n            # 1. Sentiment pie chart (top left)\n            ax1 = fig.add_subplot(gs[0, 0])\n            self._create_mini_pie_chart(ax1, analysis_results.get(\'sentiment_summary\', {}))\n            \n            # 2. Keyword bar chart (top middle)\n            ax2 = fig.add_subplot(gs[0, 1])\n            self._create_mini_keyword_chart(ax2, analysis_results.get(\'keywords\', [])[:10])\n            \n            # 3. Statistics text (top right)\n            ax3 = fig.add_subplot(gs[0, 2])\n            self._create_stats_text(ax3, analysis_results)\n            \n            # 4. Sentiment trend (middle, spans 2 columns)\n            ax4 = fig.add_subplot(gs[1, :2])\n            self._create_mini_trend_chart(ax4, analysis_results.get(\'temporal_data\', []))\n            \n            # 5. Top keywords list (middle right)\n            ax5 = fig.add_subplot(gs[1, 2])\n            self._create_keywords_list(ax5, analysis_results.get(\'keywords\', [])[:15])\n            \n            # 6. Sentiment confidence (bottom, spans all columns)\n            ax6 = fig.add_subplot(gs[2, :])\n            self._create_mini_confidence_chart(ax6, analysis_results.get(\'sentiment_results\', []))\n            \n            # Main title\n            fig.suptitle(title, fontsize=18, fontweight=\'bold\', y=0.98)\n            \n            plt.tight_layout()\n            \n            if save_path:\n                plt.savefig(save_path, dpi=300, bbox_inches=\'tight\')\n                logger.info(f"Summary dashboard saved to {save_path}")\n            \n            return fig\n            \n        except Exception as e:\n            logger.error(f"Error creating summary dashboard: {e}")\n            return self._create_error_chart("Analysis Summary Dashboard")\n    \n    def _create_mini_pie_chart(self, ax, sentiment_summary: Dict[str, Any]):\n        """Create mini pie chart for dashboard"""\n        try:\n            if not sentiment_summary:\n                ax.text(0.5, 0.5, \'No Data\', ha=\'center\', va=\'center\', transform=ax.transAxes)\n                ax.set_title(\'Sentiment Distribution\', fontsize=12, fontweight=\'bold\')\n                return\n            \n            sizes = [\n                sentiment_summary[\'percentages\'][\'positive\'],\n                sentiment_summary[\'percentages\'][\'negative\'],\n                sentiment_summary[\'percentages\'][\'neutral\']\n            ]\n            colors = [\'#2E8B57\', \'#DC143C\', \'#808080\']\n            \n            ax.pie(sizes, labels=[\'Pos\', \'Neg\', \'Neu\'], colors=colors, autopct=\'%1.0f%%\')\n            ax.set_title(\'Sentiment Distribution\', fontsize=12, fontweight=\'bold\')\n            \n        except Exception as e:\n            logger.error(f"Error creating mini pie chart: {e}")\n    \n    def _create_mini_keyword_chart(self, ax, keywords: List[Dict[str, Any]]):\n        """Create mini keyword chart for dashboard"""\n        try:\n            if not keywords:\n                ax.text(0.5, 0.5, \'No Keywords\', ha=\'center\', va=\'center\', transform=ax.transAxes)\n                ax.set_title(\'Top Keywords\', fontsize=12, fontweight=\'bold\')\n                return\n            \n            top_keywords = keywords[:8]\n            names = [kw[\'keyword\'][:15] for kw in top_keywords]  # Truncate long keywords\n            scores = [kw[\'score\'] for kw in top_keywords]\n            \n            bars = ax.barh(names, scores, color=self.colors[1], alpha=0.7)\n            ax.set_title(\'Top Keywords\', fontsize=12, fontweight=\'bold\')\n            ax.set_xlabel(\'Score\')\n            \n            # Remove spines\n            ax.spines[\'top\'].set_visible(False)\n            ax.spines[\'right\'].set_visible(False)\n            \n        except Exception as e:\n            logger.error(f"Error creating mini keyword chart: {e}")\n    \n    def _create_stats_text(self, ax, analysis_results: Dict[str, Any]):\n        """Create statistics text box for dashboard"""\n        try:\n            stats = []\n            \n            if \'sentiment_summary\' in analysis_results:\n                sentiment = analysis_results[\'sentiment_summary\']\n                stats.extend([\n                    f"Total Posts: {sentiment[\'total\']}",\n                    f"Avg Polarity: {sentiment.get(\'average_polarity\', 0):.3f}",\n                    f"Avg Confidence: {sentiment.get(\'average_confidence\', 0):.3f}"\n                ])\n            \n            if \'extraction_stats\' in analysis_results:\n                extraction = analysis_results[\'extraction_stats\']\n                stats.extend([\n                    f"Extracted: {extraction[\'posts_extracted\']}",\n                    f"Success Rate: {extraction.get(\'success_rate\', 0):.1f}%"\n                ])\n            \n            if not stats:\n                stats = [\'No statistics available\']\n            \n            ax.text(0.1, 0.9, \'\\n\'.join(stats), transform=ax.transAxes, \n                   fontsize=10, verticalalignment=\'top\',\n                   bbox=dict(boxstyle="round,pad=0.3", facecolor="lightblue", alpha=0.5))\n            \n            ax.set_title(\'Statistics\', fontsize=12, fontweight=\'bold\')\n            ax.axis(\'off\')\n            \n        except Exception as e:\n            logger.error(f"Error creating stats text: {e}")\n            ax.text(0.5, 0.5, \'Error loading stats\', ha=\'center\', va=\'center\', transform=ax.transAxes)\n            ax.set_title(\'Statistics\', fontsize=12, fontweight=\'bold\')\n            ax.axis(\'off\')\n    \n    def _create_mini_trend_chart(self, ax, temporal_data: List[Dict[str, Any]]):\n        """Create mini trend chart for dashboard"""\n        try:\n            if not temporal_data:\n                ax.text(0.5, 0.5, \'No Temporal Data\', ha=\'center\', va=\'center\', transform=ax.transAxes)\n                ax.set_title(\'Sentiment Trends\', fontsize=12, fontweight=\'bold\')\n                return\n            \n            # Convert to DataFrame\n            df = pd.DataFrame(temporal_data)\n            df[\'date\'] = pd.to_datetime(df[\'date\'])\n            df = df.sort_values(\'date\')\n            \n            # Group by date\n            daily_sentiment = df.groupby([\'date\', \'sentiment\']).size().unstack(fill_value=0)\n            \n            # Plot\n            colors = {\'positive\': \'#2E8B57\', \'negative\': \'#DC143C\', \'neutral\': \'#808080\'}\n            \n            for sentiment in [\'positive\', \'negative\', \'neutral\']:\n                if sentiment in daily_sentiment.columns:\n                    ax.plot(\n                        daily_sentiment.index,\n                        daily_sentiment[sentiment],\n                        label=sentiment.capitalize(),\n                        color=colors[sentiment],\n                        linewidth=1.5\n                    )\n            \n            ax.set_title(\'Sentiment Trends\', fontsize=12, fontweight=\'bold\')\n            ax.set_ylabel(\'Count\')\n            ax.legend(loc=\'upper right\', fontsize=8)\n            ax.grid(True, alpha=0.3)\n            \n            # Format x-axis\n            ax.tick_params(axis=\'x\', rotation=45, labelsize=8)\n            \n        except Exception as e:\n            logger.error(f"Error creating mini trend chart: {e}")\n            ax.text(0.5, 0.5, \'Error creating trend\', ha=\'center\', va=\'center\', transform=ax.transAxes)\n            ax.set_title(\'Sentiment Trends\', fontsize=12, fontweight=\'bold\')\n    \n    def _create_keywords_list(self, ax, keywords: List[Dict[str, Any]]):\n        """Create keywords list for dashboard"""\n        try:\n            if not keywords:\n                ax.text(0.5, 0.5, \'No Keywords\', ha=\'center\', va=\'center\', transform=ax.transAxes)\n                ax.set_title(\'Keywords List\', fontsize=12, fontweight=\'bold\')\n                ax.axis(\'off\')\n                return\n            \n            # Create text list\n            keyword_text = []\n            for i, kw in enumerate(keywords[:20], 1):\n                keyword_text.append(f"{i:2d}. {kw[\'keyword\'][:25]} ({kw[\'frequency\']})")\n            \n            ax.text(0.05, 0.95, \'\\n\'.join(keyword_text), transform=ax.transAxes,\n                   fontsize=8, verticalalignment=\'top\', fontfamily=\'monospace\')\n            \n            ax.set_title(\'Keywords List\', fontsize=12, fontweight=\'bold\')\n            ax.axis(\'off\')\n            \n        except Exception as e:\n            logger.error(f"Error creating keywords list: {e}")\n            ax.text(0.5, 0.5, \'Error loading keywords\', ha=\'center\', va=\'center\', transform=ax.transAxes)\n            ax.set_title(\'Keywords List\', fontsize=12, fontweight=\'bold\')\n            ax.axis(\'off\')\n    \n    def _create_mini_confidence_chart(self, ax, sentiment_results: List[Dict[str, Any]]):\n        """Create mini confidence chart for dashboard"""\n        try:\n            if not sentiment_results:\n                ax.text(0.5, 0.5, \'No Confidence Data\', ha=\'center\', va=\'center\', transform=ax.transAxes)\n                ax.set_title(\'Confidence Distribution\', fontsize=12, fontweight=\'bold\')\n                return\n            \n            # Extract confidence scores\n            confidences = [r.get(\'confidence\', 0) for r in sentiment_results]\n            \n            # Create histogram\n            ax.hist(confidences, bins=20, color=self.colors[2], alpha=0.7, edgecolor=\'black\')\n            ax.set_title(\'Confidence Distribution\', fontsize=12, fontweight=\'bold\')\n            ax.set_xlabel(\'Confidence Score\')\n            ax.set_ylabel(\'Frequency\')\n            ax.grid(True, alpha=0.3)\n            \n            # Add statistics\n            mean_conf = np.mean(confidences)\n            ax.axvline(mean_conf, color=\'red\', linestyle=\'--\', linewidth=2, label=f\'Mean: {mean_conf:.3f}\')\n            ax.legend()\n            \n        except Exception as e:\n            logger.error(f"Error creating mini confidence chart: {e}")\n            ax.text(0.5, 0.5, \'Error creating confidence chart\', ha=\'center\', va=\'center\', transform=ax.transAxes)\n            ax.set_title(\'Confidence Distribution\', fontsize=12, fontweight=\'bold\')\n    \n    def _create_error_chart(self, title: str) -> plt.Figure:\n        """Create error chart when data is unavailable"""\n        fig, ax = plt.subplots(figsize=(8, 6))\n        ax.text(0.5, 0.5, \'Error creating chart\\nData unavailable\', \n               ha=\'center\', va=\'center\', transform=ax.transAxes,\n               fontsize=14, color=\'red\')\n        ax.set_title(f\'{title} - Error\', fontsize=14, fontweight=\'bold\')\n        ax.axis(\'off\')\n        return fig\n    \n    def _create_empty_chart(self, message: str) -> plt.Figure:\n        """Create empty chart with message"""\n        fig, ax = plt.subplots(figsize=(8, 6))\n        ax.text(0.5, 0.5, message, ha=\'center\', va=\'center\', transform=ax.transAxes,\n               fontsize=14, color=\'gray\')\n        ax.axis(\'off\')\n        return fig\n    \n    def save_all_charts(self, analysis_results: Dict[str, Any], output_dir: str):\n        """Save all charts to output directory"""\n        try:\n            import os\n            \n            # Create sentiment pie chart\n            if \'sentiment_summary\' in analysis_results:\n                self.create_sentiment_pie_chart(\n                    analysis_results[\'sentiment_summary\'],\n                    save_path=os.path.join(output_dir, \'sentiment_pie_chart.png\')\n                )\n            \n            # Create sentiment bar chart\n            if \'sentiment_summary\' in analysis_results:\n                self.create_sentiment_bar_chart(\n                    analysis_results[\'sentiment_summary\'],\n                    save_path=os.path.join(output_dir, \'sentiment_bar_chart.png\')\n                )\n            \n            # Create keyword charts\n            if \'keywords\' in analysis_results:\n                self.create_keyword_frequency_chart(\n                    analysis_results[\'keywords\'],\n                    save_path=os.path.join(output_dir, \'keyword_frequency_chart.png\')\n                )\n                \n                self.create_keyword_score_chart(\n                    analysis_results[\'keywords\'],\n                    save_path=os.path.join(output_dir, \'keyword_score_chart.png\')\n                )\n            \n            # Create sentiment trend chart\n            if \'temporal_data\' in analysis_results:\n                self.create_sentiment_trend_chart(\n                    analysis_results[\'temporal_data\'],\n                    save_path=os.path.join(output_dir, \'sentiment_trend_chart.png\')\n                )\n            \n            # Create overall summary dashboard\n            self.create_overall_summary_chart(\n                analysis_results,\n                save_path=os.path.join(output_dir, \'analysis_dashboard.png\')\n            )\n            \n            logger.info(f"All charts saved to {output_dir}")\n            \n        except Exception as e:\n            logger.error(f"Error saving charts: {e}")\n</create-file>\n</function_calls>'}