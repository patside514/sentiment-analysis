{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="src/utils/file_manager.py">\n"""\nFile management utilities for the social media sentiment analysis application.\nHandles file operations, CSV exports, and data persistence.\n"""\nimport csv\nimport json\nimport pickle\nfrom datetime import datetime\nfrom pathlib import Path\nfrom typing import List, Dict, Any, Optional, Union\n\nimport pandas as pd\n\nfrom ..config import OUTPUTS_DIR, CSV_SETTINGS\nfrom .logger import get_logger\n\nlogger = get_logger(__name__)\n\nclass FileManager:\n    """File operations manager"""\n    \n    def __init__(self, base_output_dir: Optional[Path] = None):\n        self.base_output_dir = base_output_dir or OUTPUTS_DIR\n        self.base_output_dir.mkdir(parents=True, exist_ok=True)\n    \n    def create_timestamped_folder(self, service: str, source: str) -> Path:\n        """Create a timestamped folder for analysis results"""\n        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")\n        folder_name = f"{service}_{source}_{timestamp}"\n        folder_path = self.base_output_dir / folder_name\n        folder_path.mkdir(parents=True, exist_ok=True)\n        return folder_path\n    \n    def save_to_csv(self, data: List[Dict[str, Any]], filename: str, \n                    output_dir: Path, include_timestamp: bool = True) -> Path:\n        """Save data to CSV file"""\n        try:\n            if include_timestamp:\n                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")\n                filename = f"{filename}_{timestamp}.csv"\n            else:\n                filename = f"{filename}.csv"\n            \n            filepath = output_dir / filename\n            \n            if not data:\n                logger.warning(f"No data to save to {filename}")\n                return filepath\n            \n            # Convert to DataFrame for better CSV handling\n            df = pd.DataFrame(data)\n            \n            # Ensure output directory exists\n            filepath.parent.mkdir(parents=True, exist_ok=True)\n            \n            # Save to CSV\n            df.to_csv(filepath, **CSV_SETTINGS)\n            \n            logger.info(f"Saved {len(data)} records to {filename}")\n            return filepath\n            \n        except Exception as e:\n            logger.error(f"Error saving CSV file {filename}: {str(e)}")\n            raise\n    \n    def save_json(self, data: Any, filename: str, output_dir: Path) -> Path:\n        """Save data to JSON file"""\n        try:\n            filepath = output_dir / f"{filename}.json"\n            filepath.parent.mkdir(parents=True, exist_ok=True)\n            \n            with open(filepath, \'w\', encoding=\'utf-8\') as f:\n                json.dump(data, f, ensure_ascii=False, indent=2, default=str)\n            \n            logger.info(f"Saved JSON data to {filename}")\n            return filepath\n            \n        except Exception as e:\n            logger.error(f"Error saving JSON file {filename}: {str(e)}")\n            raise\n    \n    def save_analysis_report(self, analysis_results: Dict[str, Any], \n                           service: str, source: str) -> Path:\n        """Save complete analysis report"""\n        try:\n            # Create timestamped folder\n            output_dir = self.create_timestamped_folder(service, source)\n            \n            # Save raw data\n            if \'raw_data\' in analysis_results:\n                self.save_to_csv(\n                    analysis_results[\'raw_data\'], \n                    \'raw_data\', \n                    output_dir\n                )\n            \n            # Save processed data with sentiment\n            if \'processed_data\' in analysis_results:\n                self.save_to_csv(\n                    analysis_results[\'processed_data\'],\n                    \'processed_data\',\n                    output_dir\n                )\n            \n            # Save sentiment summary\n            if \'sentiment_summary\' in analysis_results:\n                self.save_json(\n                    analysis_results[\'sentiment_summary\'],\n                    \'sentiment_summary\',\n                    output_dir\n                )\n            \n            # Save keywords data\n            if \'keywords_data\' in analysis_results:\n                self.save_to_csv(\n                    analysis_results[\'keywords_data\'],\n                    \'keywords\',\n                    output_dir\n                )\n            \n            # Save complete report metadata\n            report_metadata = {\n                \'service\': service,\n                \'source\': source,\n                \'analysis_date\': datetime.now().isoformat(),\n                \'parameters\': analysis_results.get(\'parameters\', {}),\n                \'statistics\': analysis_results.get(\'statistics\', {}),\n                \'file_locations\': {\n                    \'raw_data\': \'raw_data_*.csv\',\n                    \'processed_data\': \'processed_data_*.csv\',\n                    \'sentiment_summary\': \'sentiment_summary.json\',\n                    \'keywords\': \'keywords_*.csv\'\n                }\n            }\n            \n            self.save_json(report_metadata, \'report_metadata\', output_dir)\n            \n            logger.info(f"Analysis report saved to {output_dir}")\n            return output_dir\n            \n        except Exception as e:\n            logger.error(f"Error saving analysis report: {str(e)}")\n            raise\n    \n    def load_csv(self, filepath: Path) -> pd.DataFrame:\n        """Load data from CSV file"""\n        try:\n            return pd.read_csv(filepath, encoding=\'utf-8-sig\')\n        except Exception as e:\n            logger.error(f"Error loading CSV file {filepath}: {str(e)}")\n            raise\n    \n    def load_json(self, filepath: Path) -> Any:\n        """Load data from JSON file"""\n        try:\n            with open(filepath, \'r\', encoding=\'utf-8\') as f:\n                return json.load(f)\n        except Exception as e:\n            logger.error(f"Error loading JSON file {filepath}: {str(e)}")\n            raise\n    \n    def get_latest_analysis_folder(self, service: str, source: str) -> Optional[Path]:\n        """Get the latest analysis folder for a service/source combination"""\n        try:\n            pattern = f"{service}_{source}_*"\n            matching_folders = list(self.base_output_dir.glob(pattern))\n            \n            if not matching_folders:\n                return None\n            \n            # Sort by timestamp (folder name contains timestamp)\n            return max(matching_folders, key=lambda x: x.name)\n            \n        except Exception as e:\n            logger.error(f"Error finding latest analysis folder: {str(e)}")\n            return None\n    \n    def cleanup_old_files(self, days_to_keep: int = 30):\n        """Clean up old analysis files"""\n        try:\n            cutoff_date = datetime.now() - timedelta(days=days_to_keep)\n            \n            for folder in self.base_output_dir.iterdir():\n                if folder.is_dir():\n                    folder_date = datetime.fromtimestamp(folder.stat().st_mtime)\n                    if folder_date < cutoff_date:\n                        import shutil\n                        shutil.rmtree(folder)\n                        logger.info(f"Removed old folder: {folder.name}")\n                        \n        except Exception as e:\n            logger.error(f"Error during cleanup: {str(e)}")\n</create-file>\n</function_calls>'}