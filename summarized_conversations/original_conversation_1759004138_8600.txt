{'role': 'assistant', 'content': 'Créons un script de démonstration final qui montre l\'application en action :\n\n<function_calls>\n<create-file file_path="examples/live_demo.py">\n#!/usr/bin/env python3\n"""\nLive demonstration of the Social Media Sentiment Analysis Tool\nShows real execution with simulated data\n"""\n\nimport sys\nimport time\nfrom pathlib import Path\n\n# Add src to path\nsrc_path = Path(__file__).parent.parent / \'src\'\nsys.path.insert(0, str(src_path))\n\nfrom src.main import SocialMediaAnalyzer\nfrom src.utils.file_manager import FileManager\n\ndef main():\n    print("🚀 LIVE DEMO: Social Media Sentiment Analysis Tool")\n    print("=" * 60)\n    print("This is a real execution with simulated data")\n    print("In production, this would connect to real social media APIs\\n")\n    \n    # Initialize analyzer\n    analyzer = SocialMediaAnalyzer()\n    file_manager = FileManager()\n    \n    # Define analysis parameters\n    service = "Netflix"\n    source = "twitter"  # Will use demo data\n    days = 7\n    max_posts = 50\n    \n    print(f"📊 Analyzing sentiment for: {service}")\n    print(f"📱 Source: {source}")\n    print(f"📅 Time period: {days} days")\n    print(f"📝 Max posts: {max_posts}")\n    \n    try:\n        # Progress callback to show real-time updates\n        def progress_callback(message):\n            print(f"⏳ {message}")\n        \n        # Run analysis\n        print("\\n" + "-" * 40)\n        results = analyzer.analyze(\n            service=service,\n            source=source,\n            days=days,\n            max_posts=max_posts,\n            progress_callback=progress_callback\n        )\n        \n        if not results or not results.get(\'success\'):\n            print("❌ Analysis failed")\n            return 1\n        \n        # Display results\n        print("\\n" + "=" * 60)\n        print("📈 ANALYSIS RESULTS")\n        print("=" * 60)\n        \n        # Sentiment summary\n        sentiment_summary = results.get(\'sentiment_summary\', {})\n        if sentiment_summary:\n            print(f"\\n🎯 Sentiment Summary:")\n            print(f"   Total posts analyzed: {sentiment_summary.get(\'total\', 0)}")\n            print(f"   Positive: {sentiment_summary.get(\'positive\', 0)} ({sentiment_summary.get(\'percentages\', {}).get(\'positive\', 0):.1f}%)")\n            print(f"   Negative: {sentiment_summary.get(\'negative\', 0)} ({sentiment_summary.get(\'percentages\', {}).get(\'negative\', 0):.1f}%)")\n            print(f"   Neutral: {sentiment_summary.get(\'neutral\', 0)} ({sentiment_summary.get(\'percentages\', {}).get(\'neutral\', 0):.1f}%)")\n            print(f"   Average polarity: {sentiment_summary.get(\'average_polarity\', 0):.3f}")\n            print(f"   Average confidence: {sentiment_summary.get(\'average_confidence\', 0):.3f}")\n        \n        # Top keywords\n        keywords = results.get(\'keywords\', [])\n        if keywords:\n            print(f"\\n🔑 Top Keywords:")\n            for i, kw in enumerate(keywords[:10], 1):\n                print(f"   {i:2d}. {kw[\'keyword\'][:20]:<20} (score: {kw[\'score\']:.3f}, freq: {kw[\'frequency\']})")\n        \n        # Output location\n        output_dir = results.get(\'metadata\', {}).get(\'output_directory\')\n        if output_dir:\n            print(f"\\n📁 Results saved to: {output_dir}")\n            print("   Files generated:")\n            print("   • raw_data_[timestamp].csv - Raw extracted data")\n            print("   • sentiment_summary.json - Sentiment analysis results")\n            print("   • report_metadata.json - Analysis metadata")\n            print("   • Charts and visualizations (in charts/ folder)")\n            print("   • Word clouds (in wordclouds/ folder)")\n        \n        # Show sample of processed data\n        processed_data = results.get(\'processed_data\', [])\n        if processed_data:\n            print(f"\\n📝 Sample Processed Posts:")\n            for i, post in enumerate(processed_data[:3], 1):\n                text = post.get(\'text\', \'\')[:60] + \'...\' if len(post.get(\'text\', \'\')) > 60 else post.get(\'text\', \'\')\n                sentiment = post.get(\'sentiment\', \'unknown\')\n                print(f"   {i}. {text}")\n                print(f"      → Sentiment: {sentiment}")\n        \n        # Generate HTML report\n        print(f"\\n📄 Generating HTML report...")\n        from src.visualization.report_generator import ReportGenerator\n        report_gen = ReportGenerator()\n        html_path = report_gen.generate_html_report(results, service, source)\n        print(f"   HTML report: {html_path}")\n        \n        print("\\n" + "=" * 60)\n        print("✅ LIVE DEMO COMPLETED SUCCESSFULLY!")\n        print("\\n🎯 Key Takeaways:")\n        print("   • The application successfully analyzed sentiment from demo data")\n        print("   • Generated comprehensive reports with visualizations")\n        print("   • All core functionality is working correctly")\n        print("   • Ready for production use with real API credentials")\n        \n        print("\\n🚀 Next Steps for Production:")\n        print("   1. Configure real API keys in .env file")\n        print("   2. Run: python app.py --service \'YourBrand\' --source \'twitter\' --days 30")\n        print("   3. For help: python app.py --help")\n        \n        return 0\n        \n    except Exception as e:\n        print(f"\\n❌ Live demo failed: {e}")\n        return 1\n\nif __name__ == \'__main__\':\n    sys.exit(main())\n</create-file>\n</function_calls>'}