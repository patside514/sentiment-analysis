{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="src/visualization/wordcloud_generator.py">\n"""\nWord cloud generator for keyword visualization.\nCreates word clouds from keywords and text data.\n"""\nfrom typing import List, Dict, Any, Optional\nimport numpy as np\nfrom PIL import Image\n\ntry:\n    from wordcloud import WordCloud, STOPWORDS\n    WORDCLOUD_AVAILABLE = True\nexcept ImportError:\n    WORDCLOUD_AVAILABLE = False\n\nfrom ..config import VizConfig\nfrom ..utils.logger import get_logger\n\nlogger = get_logger(__name__)\n\nclass WordCloudGenerator:\n    """Generate word clouds from keywords and text data"""\n    \n    def __init__(self):\n        self.width = VizConfig.WC_WIDTH\n        self.height = VizConfig.WC_HEIGHT\n        self.max_words = VizConfig.WC_MAX_WORDS\n        self.collocations = VizConfig.WC_COLLOCATIONS\n        \n    def create_keyword_wordcloud(self, keywords: List[Dict[str, Any]], \n                               title: str = "Keywords Word Cloud",\n                               save_path: Optional[str] = None,\n                               colormap: str = \'viridis\') -> Optional[\'WordCloud\']:\n        """Create word cloud from keywords with scores"""\n        if not WORDCLOUD_AVAILABLE:\n            logger.error("WordCloud library not available")\n            return None\n        \n        if not keywords:\n            logger.warning("No keywords provided for word cloud")\n            return None\n        \n        try:\n            # Prepare word frequencies from keywords\n            word_frequencies = {}\n            for keyword in keywords:\n                word = keyword[\'keyword\']\n                # Use score as weight, fallback to frequency\n                weight = keyword.get(\'score\', keyword.get(\'frequency\', 1))\n                word_frequencies[word] = weight\n            \n            # Create word cloud\n            wordcloud = WordCloud(\n                width=self.width,\n                height=self.height,\n                max_words=self.max_words,\n                colormap=colormap,\n                background_color=\'white\',\n                relative_scaling=0.5,\n                min_font_size=10,\n                max_font_size=100,\n                collocations=self.collocations,\n                stopwords=set()  # We already filtered keywords\n            ).generate_from_frequencies(word_frequencies)\n            \n            # Create visualization\n            self._visualize_wordcloud(wordcloud, title, save_path)\n            \n            logger.info(f"Keyword word cloud created with {len(word_frequencies)} words")\n            return wordcloud\n            \n        except Exception as e:\n            logger.error(f"Error creating keyword word cloud: {e}")\n            return None\n    \n    def create_text_wordcloud(self, texts: List[str], \n                            title: str = "Text Word Cloud",\n                            save_path: Optional[str] = None,\n                            colormap: str = \'plasma\',\n                            additional_stopwords: Optional[set] = None) -> Optional[\'WordCloud\']:\n        """Create word cloud from raw text data"""\n        if not WORDCLOUD_AVAILABLE:\n            logger.error("WordCloud library not available")\n            return None\n        \n        if not texts:\n            logger.warning("No texts provided for word cloud")\n            return None\n        \n        try:\n            # Combine all texts\n            combined_text = \' \'.join(texts)\n            \n            # Prepare stopwords\n            stopwords = set(STOPWORDS)\n            if additional_stopwords:\n                stopwords.update(additional_stopwords)\n            \n            # Add language-specific stopwords\n            if hasattr(self, \'language\'):\n                from ..nlp.text_preprocessor import TextPreprocessor\n                preprocessor = TextPreprocessor(self.language)\n                if hasattr(preprocessor, \'stop_words\'):\n                    for lang_stopwords in preprocessor.stop_words.values():\n                        stopwords.update(lang_stopwords)\n            \n            # Create word cloud\n            wordcloud = WordCloud(\n                width=self.width,\n                height=self.height,\n                max_words=self.max_words,\n                colormap=colormap,\n                background_color=\'white\',\n                relative_scaling=0.5,\n                min_font_size=10,\n                max_font_size=100,\n                collocations=self.collocations,\n                stopwords=stopwords\n            ).generate(combined_text)\n            \n            # Create visualization\n            self._visualize_wordcloud(wordcloud, title, save_path)\n            \n            logger.info(f"Text word cloud created from {len(texts)} texts")\n            return wordcloud\n            \n        except Exception as e:\n            logger.error(f"Error creating text word cloud: {e}")\n            return None\n    \n    def create_sentiment_wordcloud(self, sentiment_results: List[Dict[str, Any]],\n                                 sentiment_type: str = \'positive\',\n                                 title: str = None,\n                                 save_path: Optional[str] = None,\n                                 colormap: str = None) -> Optional[\'WordCloud\']:\n        """Create word cloud for specific sentiment"""\n        if not WORDCLOUD_AVAILABLE:\n            logger.error("WordCloud library not available")\n            return None\n        \n        if not sentiment_results:\n            logger.warning("No sentiment results provided")\n            return None\n        \n        try:\n            # Filter texts by sentiment\n            sentiment_texts = []\n            for result in sentiment_results:\n                if result[\'sentiment\'] == sentiment_type:\n                    # Extract text from result\n                    text = result.get(\'text\', \'\')\n                    if text and text != \'...\':  # Skip truncated indicators\n                        sentiment_texts.append(text)\n            \n            if not sentiment_texts:\n                logger.warning(f"No texts found for sentiment: {sentiment_type}")\n                return None\n            \n            # Set default parameters based on sentiment\n            if title is None:\n                title = f"{sentiment_type.capitalize()} Sentiment Word Cloud"\n            \n            if colormap is None:\n                colormap = {\n                    \'positive\': \'Greens\',\n                    \'negative\': \'Reds\',\n                    \'neutral\': \'Grays\'\n                }.get(sentiment_type, \'viridis\')\n            \n            # Create word cloud\n            wordcloud = self.create_text_wordcloud(\n                texts=sentiment_texts,\n                title=title,\n                save_path=save_path,\n                colormap=colormap\n            )\n            \n            return wordcloud\n            \n        except Exception as e:\n            logger.error(f"Error creating sentiment word cloud: {e}")\n            return None\n    \n    def create_comparison_wordcloud(self, keywords_groups: Dict[str, List[Dict[str, Any]]],\n                                  title: str = "Keywords Comparison",\n                                  save_path: Optional[str] = None) -> Optional[\'WordCloud\']:\n        """Create word cloud comparing different groups of keywords"""\n        if not WORDCLOUD_AVAILABLE:\n            logger.error("WordCloud library not available")\n            return None\n        \n        if not keywords_groups:\n            logger.warning("No keyword groups provided")\n            return None\n        \n        try:\n            # Combine all keywords with group prefixes\n            combined_frequencies = {}\n            \n            for group_name, keywords in keywords_groups.items():\n                for keyword in keywords:\n                    word = f"{group_name}:{keyword[\'keyword\']}"\n                    weight = keyword.get(\'score\', keyword.get(\'frequency\', 1))\n                    combined_frequencies[word] = weight\n            \n            # Create word cloud\n            wordcloud = WordCloud(\n                width=self.width,\n                height=self.height,\n                max_words=self.max_words,\n                colormap=\'tab10\',\n                background_color=\'white\',\n                relative_scaling=0.5,\n                min_font_size=10,\n                max_font_size=100,\n                collocations=False\n            ).generate_from_frequencies(combined_frequencies)\n            \n            # Create visualization\n            self._visualize_wordcloud(wordcloud, title, save_path)\n            \n            logger.info(f"Comparison word cloud created with {len(combined_frequencies)} words")\n            return wordcloud\n            \n        except Exception as e:\n            logger.error(f"Error creating comparison word cloud: {e}")\n            return None\n    \n    def create_custom_shape_wordcloud(self, keywords: List[Dict[str, Any]],\n                                    mask_image_path: str,\n                                    title: str = "Custom Shape Word Cloud",\n                                    save_path: Optional[str] = None,\n                                    colormap: str = \'viridis\') -> Optional[\'WordCloud\']:\n        """Create word cloud in custom shape"""\n        if not WORDCLOUD_AVAILABLE:\n            logger.error("WordCloud library not available")\n            return None\n        \n        if not keywords:\n            logger.warning("No keywords provided")\n            return None\n        \n        try:\n            # Load mask image\n            mask = np.array(Image.open(mask_image_path))\n            \n            # Prepare word frequencies\n            word_frequencies = {}\n            for keyword in keywords:\n                word = keyword[\'keyword\']\n                weight = keyword.get(\'score\', keyword.get(\'frequency\', 1))\n                word_frequencies[word] = weight\n            \n            # Create word cloud with mask\n            wordcloud = WordCloud(\n                width=self.width,\n                height=self.height,\n                max_words=self.max_words,\n                colormap=colormap,\n                background_color=\'white\',\n                mask=mask,\n                relative_scaling=0.5,\n                min_font_size=10,\n                max_font_size=100,\n                collocations=self.collocations,\n                contour_width=3,\n                contour_color=\'steelblue\'\n            ).generate_from_frequencies(word_frequencies)\n            \n            # Create visualization\n            self._visualize_wordcloud(wordcloud, title, save_path)\n            \n            logger.info(f"Custom shape word cloud created")\n            return wordcloud\n            \n        except Exception as e:\n            logger.error(f"Error creating custom shape word cloud: {e}")\n            return None\n    \n    def _visualize_wordcloud(self, wordcloud: \'WordCloud\', title: str, save_path: Optional[str]):\n        """Visualize word cloud"""\n        try:\n            plt.figure(figsize=(12, 8))\n            plt.imshow(wordcloud, interpolation=\'bilinear\')\n            plt.axis(\'off\')\n            plt.title(title, fontsize=16, fontweight=\'bold\', pad=20)\n            \n            if save_path:\n                plt.savefig(save_path, dpi=300, bbox_inches=\'tight\')\n                logger.info(f"Word cloud saved to {save_path}")\n            else:\n                plt.show()\n                \n        except Exception as e:\n            logger.error(f"Error visualizing word cloud: {e}")\n    \n    def create_wordcloud_comparison_grid(self, sentiment_results: List[Dict[str, Any]],\n                                       title: str = "Sentiment Word Clouds Comparison",\n                                       save_path: Optional[str] = None) -> bool:\n        """Create grid of word clouds for different sentiments"""\n        if not WORDCLOUD_AVAILABLE:\n            logger.error("WordCloud library not available")\n            return False\n        \n        try:\n            # Create figure with subplots\n            fig, axes = plt.subplots(1, 3, figsize=(18, 6))\n            fig.suptitle(title, fontsize=16, fontweight=\'bold\')\n            \n            sentiments = [\'positive\', \'negative\', \'neutral\']\n            colormaps = [\'Greens\', \'Reds\', \'Grays\']\n            titles = [\'Positive Sentiment\', \'Negative Sentiment\', \'Neutral Sentiment\']\n            \n            for i, (sentiment, colormap, subtitle) in enumerate(zip(sentiments, colormaps, titles)):\n                # Filter texts for this sentiment\n                sentiment_texts = [\n                    r.get(\'text\', \'\') for r in sentiment_results \n                    if r[\'sentiment\'] == sentiment and r.get(\'text\', \'\') and r.get(\'text\', \'\') != \'...\'\n                ]\n                \n                if sentiment_texts:\n                    # Create word cloud\n                    wordcloud = self.create_text_wordcloud(\n                        texts=sentiment_texts,\n                        title=subtitle,\n                        colormap=colormap\n                    )\n                    \n                    if wordcloud:\n                        axes[i].imshow(wordcloud, interpolation=\'bilinear\')\n                        axes[i].set_title(subtitle, fontsize=12, fontweight=\'bold\')\n                    else:\n                        axes[i].text(0.5, 0.5, \'No Data\', ha=\'center\', va=\'center\', \n                                   transform=axes[i].transAxes)\n                        axes[i].set_title(subtitle, fontsize=12, fontweight=\'bold\')\n                else:\n                    axes[i].text(0.5, 0.5, \'No Data\', ha=\'center\', va=\'center\', \n                               transform=axes[i].transAxes)\n                    axes[i].set_title(subtitle, fontsize=12, fontweight=\'bold\')\n                \n                axes[i].axis(\'off\')\n            \n            plt.tight_layout()\n            \n            if save_path:\n                plt.savefig(save_path, dpi=300, bbox_inches=\'tight\')\n                logger.info(f"Word cloud comparison grid saved to {save_path}")\n            else:\n                plt.show()\n            \n            return True\n            \n        except Exception as e:\n            logger.error(f"Error creating word cloud comparison grid: {e}")\n            return False\n    \n    def generate_all_wordclouds(self, analysis_results: Dict[str, Any], output_dir: str):\n        """Generate all types of word clouds"""\n        try:\n            import os\n            \n            # Create output directory if it doesn\'t exist\n            os.makedirs(output_dir, exist_ok=True)\n            \n            # Keyword word cloud\n            if \'keywords\' in analysis_results:\n                self.create_keyword_wordcloud(\n                    keywords=analysis_results[\'keywords\'],\n                    save_path=os.path.join(output_dir, \'keywords_wordcloud.png\')\n                )\n            \n            # Sentiment word clouds\n            if \'sentiment_results\' in analysis_results:\n                # Individual sentiment word clouds\n                for sentiment in [\'positive\', \'negative\', \'neutral\']:\n                    self.create_sentiment_wordcloud(\n                        sentiment_results=analysis_results[\'sentiment_results\'],\n                        sentiment_type=sentiment,\n                        save_path=os.path.join(output_dir, f\'{sentiment}_sentiment_wordcloud.png\')\n                    )\n                \n                # Comparison grid\n                self.create_wordcloud_comparison_grid(\n                    sentiment_results=analysis_results[\'sentiment_results\'],\n                    save_path=os.path.join(output_dir, \'sentiment_wordclouds_comparison.png\')\n                )\n            \n            # Text word cloud (if raw texts available)\n            if \'raw_texts\' in analysis_results:\n                self.create_text_wordcloud(\n                    texts=analysis_results[\'raw_texts\'],\n                    save_path=os.path.join(output_dir, \'text_wordcloud.png\')\n                )\n            \n            logger.info(f"All word clouds generated in {output_dir}")\n            \n        except Exception as e:\n            logger.error(f"Error generating word clouds: {e}")\n</create-file>\n</function_calls>'}