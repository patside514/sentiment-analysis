{'role': 'assistant', 'content': '\n<function_calls>\n<create-file file_path="src/utils/data_validator.py">\n"""\nData validation utilities for the social media sentiment analysis application.\nProvides validation for inputs, API responses, and processed data.\n"""\nimport re\nfrom datetime import datetime, timedelta\nfrom typing import Dict, List, Any, Optional, Union\nfrom urllib.parse import urlparse\n\nfrom ..config import AnalysisConfig, AVAILABLE_SOURCES\n\nclass DataValidator:\n    """Data validation utilities"""\n    \n    @staticmethod\n    def validate_service_name(service: str) -> bool:\n        """Validate service name parameter"""\n        if not service or not isinstance(service, str):\n            return False\n        \n        # Basic validation - allow alphanumeric, spaces, and common punctuation\n        pattern = r\'^[a-zA-Z0-9\\s\\-_.,&\\\'()]+$\'\n        return bool(re.match(pattern, service)) and len(service) <= 100\n    \n    @staticmethod\n    def validate_source(source: str) -> bool:\n        """Validate data source"""\n        return source.lower() in AVAILABLE_SOURCES\n    \n    @staticmethod\n    def validate_days(days: int) -> bool:\n        """Validate days parameter"""\n        return (isinstance(days, int) and \n                1 <= days <= 365 and \n                days <= AnalysisConfig.DEFAULT_DAYS * 2)  # Max 60 days\n    \n    @staticmethod\n    def validate_max_posts(max_posts: int) -> bool:\n        """Validate max posts parameter"""\n        return (isinstance(max_posts, int) and \n                AnalysisConfig.MIN_POSTS <= max_posts <= AnalysisConfig.MAX_POSTS)\n    \n    @staticmethod\n    def validate_date_range(start_date: datetime, end_date: datetime) -> bool:\n        """Validate date range"""\n        if not isinstance(start_date, datetime) or not isinstance(end_date, datetime):\n            return False\n        \n        if start_date > end_date:\n            return False\n        \n        # Check if range is not too large\n        delta = end_date - start_date\n        return delta.days <= AnalysisConfig.DEFAULT_DAYS * 2\n    \n    @staticmethod\n    def validate_text_content(text: str) -> bool:\n        """Validate text content"""\n        if not text or not isinstance(text, str):\n            return False\n        \n        # Check minimum length\n        if len(text.strip()) < 10:\n            return False\n        \n        # Check for excessive length\n        if len(text) > 5000:\n            return False\n        \n        # Basic content validation\n        return not text.isspace()\n    \n    @staticmethod\n    def validate_url(url: str) -> bool:\n        """Validate URL format"""\n        try:\n            result = urlparse(url)\n            return all([result.scheme, result.netloc])\n        except Exception:\n            return False\n    \n    @staticmethod\n    def validate_tweet_data(tweet_data: Dict[str, Any]) -> bool:\n        """Validate tweet data structure"""\n        required_fields = [\'id\', \'text\', \'created_at\']\n        \n        if not isinstance(tweet_data, dict):\n            return False\n        \n        # Check required fields\n        for field in required_fields:\n            if field not in tweet_data:\n                return False\n        \n        # Validate text content\n        if not DataValidator.validate_text_content(tweet_data.get(\'text\', \'\')):\n            return False\n        \n        # Validate date format\n        try:\n            datetime.fromisoformat(tweet_data[\'created_at\'].replace(\'Z\', \'+00:00\'))\n        except (ValueError, AttributeError):\n            return False\n        \n        return True\n    \n    @staticmethod\n    def validate_facebook_post(post_data: Dict[str, Any]) -> bool:\n        """Validate Facebook post data"""\n        required_fields = [\'id\', \'message\', \'created_time\']\n        \n        if not isinstance(post_data, dict):\n            return False\n        \n        for field in required_fields:\n            if field not in post_data:\n                return False\n        \n        # Validate message content\n        if not DataValidator.validate_text_content(post_data.get(\'message\', \'\')):\n            return False\n        \n        return True\n    \n    @staticmethod\n    def validate_google_review(review_data: Dict[str, Any]) -> bool:\n        """Validate Google review data"""\n        required_fields = [\'review_id\', \'text\', \'rating\', \'time\']\n        \n        if not isinstance(review_data, dict):\n            return False\n        \n        for field in required_fields:\n            if field not in review_data:\n                return False\n        \n        # Validate rating\n        rating = review_data.get(\'rating\')\n        if not isinstance(rating, (int, float)) or not 1 <= rating <= 5:\n            return False\n        \n        # Validate text content\n        if not DataValidator.validate_text_content(review_data.get(\'text\', \'\')):\n            return False\n        \n        return True\n    \n    @staticmethod\n    def clean_text(text: str) -> str:\n        """Basic text cleaning"""\n        if not text or not isinstance(text, str):\n            return ""\n        \n        # Remove excessive whitespace\n        text = re.sub(r\'\\s+\', \' \', text)\n        \n        # Remove special characters that might cause issues\n        text = re.sub(r\'[^\\w\\s@#.,!?\\-\\\'"]\', \'\', text)\n        \n        return text.strip()\n    \n    @staticmethod\n    def sanitize_filename(filename: str) -> str:\n        """Sanitize filename for safe file system usage"""\n        if not filename:\n            return "unnamed"\n        \n        # Remove or replace unsafe characters\n        filename = re.sub(r\'[<>:\\"/\\\\|?*]\', \'_\', filename)\n        filename = re.sub(r\'\\s+\', \'_\', filename)\n        filename = filename.strip(\'._-\')\n        \n        # Limit length\n        return filename[:50] or "unnamed"\n\nclass ValidationError(Exception):\n    """Custom validation error"""\n    pass\n\ndef validate_cli_args(service: str, source: str, days: int, max_posts: int) -> Dict[str, Any]:\n    """Validate all CLI arguments"""\n    errors = []\n    \n    # Validate service name\n    if not DataValidator.validate_service_name(service):\n        errors.append("Invalid service name. Use alphanumeric characters, spaces, and basic punctuation.")\n    \n    # Validate source\n    if not DataValidator.validate_source(source):\n        errors.append(f"Invalid source. Available sources: {\', \'.join(AVAILABLE_SOURCES)}")\n    \n    # Validate days\n    if not DataValidator.validate_days(days):\n        errors.append("Invalid days parameter. Must be between 1 and 60.")\n    \n    # Validate max posts\n    if not DataValidator.validate_max_posts(max_posts):\n        errors.append(f"Invalid max posts. Must be between {AnalysisConfig.MIN_POSTS} and {AnalysisConfig.MAX_POSTS}.")\n    \n    return {\n        \'valid\': len(errors) == 0,\n        \'errors\': errors,\n        \'cleaned\': {\n            \'service\': DataValidator.clean_text(service),\n            \'source\': source.lower(),\n            \'days\': days,\n            \'max_posts\': max_posts\n        }\n    }\n</create-file>\n</function_calls>\n</function_calls>'}